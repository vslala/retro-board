{"version":3,"sources":["logo.svg","img/retro-board-lp-header.svg","img/retro-board-design.png","img/retro-board-dashboard.png","img/retro-board-create-template.png","models/User.ts","env-config.ts","service/Firebase.ts","redux/types/RetroBoardActionTypes.ts","components/smart/PageFooter.tsx","components/smart/PageHeader.tsx","components/smart/layouts/LayoutAuthenticated.tsx","components/smart/layouts/LayoutUnauthenticated.tsx","models/RetroBoard.ts","models/RetroWalls.ts","models/Notes.ts","redux/reducers/RetroBoardReducers.ts","redux/store/Store.ts","components/smart/boards/MyBoards.tsx","components/dumb/EditText.tsx","components/dumb/ColorPicker.tsx","components/dumb/boards/Editor.tsx","components/dumb/boards/Like.tsx","service/WebSocket/DuplexCommunication.ts","service/UnauthorizedException.ts","service/RetroBoard/RetroBoardServiceV2.ts","service/RetroBoard/RetroBoardServiceFactory.ts","redux/context/BoardContext.tsx","components/smart/boards/StickyNote.tsx","models/Note.ts","components/dumb/templates/DisplayBoardTemplate.tsx","components/dumb/templates/CreateNewTemplate.tsx","components/smart/boards/CreateRetroBoard.tsx","models/RetroWall.ts","redux/actions/RetroBoardActions.ts","components/smart/boards/CreateRetroBoardManager.tsx","components/smart/templates/TemplateManager.tsx","containers/HomePage.tsx","components/dumb/boards/AddNewNote.tsx","components/dumb/CarouselView.tsx","components/smart/boards/StickyWall.tsx","components/dumb/ShareBoard.tsx","service/Teams/TeamsServiceV1.ts","service/Teams/TeamsServiceFactory.ts","components/dumb/BlurToggle.tsx","containers/RetroBoardPage.tsx","containers/LandingPage.tsx","components/smart/Logout.tsx","components/dumb/teams/CreateNewTeam.tsx","components/dumb/teams/AddNewTeamMember.tsx","containers/TeamsPage.tsx","service/Templates/TemplateService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","User","uid","idToken","username","displayName","email","isEmailVerified","ID_TOKEN","USER_INFO","REFRESH_TOKEN","PROTOCOL","window","location","protocol","HOST_NAMES","Map","set","host","SERVICE_URL","get","console","log","request","axios","create","baseURL","interceptors","use","config","headers","localStorage","getItem","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","React","createContext","auth","authenticatedUser","googleAuthenticationProvider","firebase","GoogleAuthProvider","loggedInUser","initializeApp","this","database","signInWithPopup","userCredentials","persistLoggedInUserInfo","generateRandomText","length","result","characters","charactersLength","i","charAt","Math","floor","random","user","getIdToken","isAnonymous","post","status","setItem","JSON","stringify","refreshToken","loggedInUserJson","parse","fetch","method","body","grant_type","refresh_token","newIdToken","json","data","id_token","signInAnonymously","clear","instance","ActionTypes","SortType","PageFooter","className","href","withRouter","props","getInstance","getLoggedInUser","Navbar","bg","expand","to","Toggle","aria-controls","Collapse","id","Nav","Button","onClick","history","push","variant","LayoutAuthenticated","state","isUserAuthenticated","isLoading","then","response","setState","Spinner","animation","Container","fluid","children","pathname","referrer","Component","LayoutUnauthenticated","search","includes","RETRO_BOARD_STYLES","wentWell","stickyNote","backgroundColor","textColor","likeBtnPosition","toImprove","actionItems","RetroBoard","name","userId","maxLikes","blur","retroBoard","RetroWalls","retroWalls","retroBoardId","walls","Notes","notes","_notes","_removeDuplicates","arr","forEach","note","index","findIndex","item","noteId","initialState","sortByVotes","sort","item1","item2","itemOneLikesCount","itemTwoLikesCount","likedBy","logger","createLogger","store","createStore","action","type","CREATE_RETRO_BOARD","payload","CREATE_RETRO_WALLS","CREATE_NOTE","UPDATE_NOTE","modifiedNotes","map","Object","assign","DELETE_NOTE","GET_NOTES","SORT","SORT_BY_VOTES","SORT_BY_TIMESTAMP","REFRESH_WALLS","composeWithDevTools","applyMiddleware","ReduxPromise","MyBoards","retroBoardService","useState","boards","setBoards","loader","setLoader","useEffect","a","getMyBoards","myBoards","_getMyBoards","catch","e","Row","style","position","top","left","board","Col","lg","key","Card","Body","Footer","deleteBoard","boardId","filter","handleDelete","color","EditText","showForm","setForm","textVal","setTextVal","handleOnBlur","onSubmit","Form","preventDefault","handleSubmit","FormGroup","Control","value","onBlur","onChange","currentTarget","handleChange","FormLabel","fontSize","fontWeight","marginRight","title","ColorPicker","setColor","DropdownButton","Dropdown","Item","onChangeComplete","handleOnChangeComplete","Editor","editorText","noteText","handleKeyboardKeyPress","handleEnter","replace","bind","InputGroup","FormControl","as","autoFocus","data-testid","onKeyUp","aria-label","Like","users","handleUpVote","getCurrentUser","userJson","Badge","cursor","margin","Link","DuplexCommunication","isConnected","socket","SockJS","stomp","Stomp","over","accessToken","connect","success","error","connected","topic","callback","subscribeInterval","setInterval","clearInterval","subscribe","UnauthorizedException","message","RetroBoardServiceV2","newNote","Error","retroBoardResponse","retroWallsResponse","delete","params","retroWallId","uri","wallId","isAuth","notesData","sortedByVotes","obj1","obj2","modifiedNote","put","selectedTeams","itemId","teamIds","selectedTeam","teamId","RetroBoardServiceFactory","BoardContext","BoardContextProvider","boardProps","setBoardProps","Provider","StickyNote","useContext","thisNote","setThisNote","showEditor","setShowEditor","show","toast","setToast","modifyStickyNote","updateNote","currentUser","usersWhoUpVotedThisNote","thisUserHasVotedAlready","u","getNotes","allNotesBelongingToCurrentBoard","totalVotesByCurrentUser","some","maxAllowedVotes","setTimeout","getNoteDataWhenModified","callBackWall","cardBodyContent","createdBy","width","source","escapeHtml","mergedNotes","split","mergeNoteIfRequired","padding","fontFamily","minHeight","modifiedNoteText","right","bottom","stickyNoteId","deleteNote","Toast","Note","String","Date","now","DisplayBoardTemplate","boardTemplate","removeWall","wall","wallTitle","noteStyle","wallStyle","CreateNewTemplate","setShow","hideModal","templateTitle","templateId","setBoardTemplate","setWallTitle","setTextColor","setBackgroundColor","border","Modal","onHide","dialogClassName","Header","text","inline","placeholder","handleWallName","marginLeft","hex","newTemplateWall","wallOrder","disabled","slice","onCreateTemplate","CreateRetroBoard","onCreateRetroBoard","formInput","setFormInput","handleClose","handleCreateRetroBoard","closeButton","Title","Group","Label","autoComplete","RetroWall","sortCards","RetroBoardActions","dispatch","useDispatch","boardInput","retroBoardActions","createNewRetroBoard","createRetroBoard","templateWalls","createRetroWalls","templateWall","newInstance","setWallOrder","boardWalls","templates","setTemplates","handleCreateTemplate","templateService","createBoardTemplate","persistedBoardTemplate","deleteTemplate","deleteBoardTemplate","template","getBoardTemplates","boardTemplates","md","CreateRetroBoardManager","HomePage","document","AddNewNote","addNote","CarouselView","carouselView","setCarouselView","setIndex","Carousel","activeIndex","onSelect","selectedIndex","interval","items","height","Caption","overflowY","borderTop","formatText","StickyWall","setNotes","addNewNote","n1","n2","callBack","handleDrop","droppedOnNote","draggedNote","dataTransfer","getData","find","boardService","deletedNote","handleDragOver","dropEffect","noteToDeleted","modifyNoteCallback","wallNotes","wallNote","getNotesDataOnUpdate","stickers","ListGroupItem","marginBottom","draggable","onDragStart","setData","handleDragStart","onDragOver","onDrop","ListGroup","ShareBoard","teams","pageLoader","setPageLoader","setSelectedTeams","undefined","setResponse","shareWith","Alert","multiple","selectedItems","selectedOptions","team","teamName","ProgressBar","animated","TeamsServiceV1","newTeamResponse","teamMemberEmail","userEmail","teamsResponse","teamMember","TeamsServiceFactory","BlurToggle","val","getRetroBoardById","updateRetroBoard","isChecked","Check","checked","label","match","setBoardId","boardTitle","setBoardTitle","NONE","sortSelectValue","setTeams","setWalls","csvData","setCSVData","convertJsonToCsv","getRetroWalls","wallName","upvotes","shareBoardWith","shareBoard","wallsData","sortBy","getRetroBoardDataOnUpdate","getMyTeams","teamListResponse","initRetroBoard","borderBottom","target","filename","getReferrerUrl","tryAnonymousLogin","authenticateAnonymousUser","src","logo","alt","textAlign","authenticateUser","xmlns","viewBox","fill","fill-opacity","d","Image","headerImg","retroBoardImg","retroBoardTemplateImg","retroBoardDashboardImg","Logout","service","logout","CreateNewTeam","showModal","setShowModal","closeModal","setTeamName","teamMembers","createTeam","AddNewTeamMember","setTeamMemberEmail","msg","setError","addTeamMember","teamsService","showTeamMemberModal","setShowTeamMemberModal","teamMemberModalData","setTeamMemberModalData","createNewTeam","newTeam","deleteTeam","newTeams","t","alert","getTeamMembers","teamMemberListResponse","removeTeamMember","sm","xs","TemplateService","templateResponse","App","isLogInFlowExecuted","exact","path","component","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc248ca5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/retro-board-lp-header.07cde02c.svg\";","module.exports = __webpack_public_path__ + \"static/media/retro-board-design.dbdaebce.png\";","module.exports = __webpack_public_path__ + \"static/media/retro-board-dashboard.70ce411e.png\";","module.exports = __webpack_public_path__ + \"static/media/retro-board-create-template.734256dc.png\";","class User {\n    public static ID_TOKEN = \"idToken\";\n    public static USER_INFO = \"userInfo\";\n    public static REFRESH_TOKEN = \"refreshToken\";\n\n    public uid: string = \"\"\n    public idToken: string = \"\"\n    public username: string | undefined\n    public displayName: string = \"\"\n    public email: string = \"\"\n    public isEmailVerified: boolean = false;\n}\n\nexport default User","import axios from \"axios\";\nimport User from \"./models/User\";\n\nconst API_HOST_LOCAL = 'localhost:8082';\nconst API_INET_LOCAL = '192.168.1.6:8082';\nconst API_HOST_TEST = '139.59.25.205:8082';\nconst API_HOST_PROD = 'retro-service.bemyaficionado.com';\nconst API_HOST_STAGE = 'retro-board-api.herokuapp.com';\n\nconst UI_HOST_LOCAL = 'localhost:3000';\nconst UI_INET_LOCAL = '192.168.1.6:3000';\nconst UI_HOST_TEST = 'localhost:3001';\nconst UI_HOST_PROD = 'retro.bemyaficionado.com';\nconst UI_HOST_GITHUB = 'vslala.github.io';\n\nconst PROTOCOL = window.location.protocol + \"//\";\nconst HOST_NAMES:Map<string,string> = new Map<string,string>();\nHOST_NAMES.set(UI_HOST_LOCAL, API_HOST_LOCAL);\nHOST_NAMES.set(UI_INET_LOCAL, API_INET_LOCAL);\nHOST_NAMES.set(UI_HOST_TEST, API_HOST_TEST);\nHOST_NAMES.set(UI_HOST_PROD, API_HOST_PROD);\nHOST_NAMES.set(UI_HOST_GITHUB, API_HOST_STAGE);\n\nlet host = window.location.host;\n// @ts-ignore\nexport const SERVICE_URL = PROTOCOL + HOST_NAMES.get(host); // hostname:port\n\nconsole.log(\"SERVICE_URL: \", SERVICE_URL);\n\nexport const request = axios.create({\n    baseURL: SERVICE_URL\n});\n\nrequest.interceptors.request.use((config) => {\n    config.headers = {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem(User.ID_TOKEN)!}`,\n        'Accept': '*/*'\n    }\n    return config;\n});\n","import React from 'react'\nimport firebase from \"firebase\";\nimport User from \"../models/User\";\nimport {request, SERVICE_URL} from \"../env-config\";\n\nexport const config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n}\n\nexport interface RefreshTokenResponse {\n    access_token: string\n    expires_in: number\n    token_type: string,\n    refresh_token: string,\n    id_token: string,\n    user_id: string,\n    project_id: string\n}\n\nexport const FirebaseContext = React.createContext(null)\n\nclass Firebase {\n\n    private static instance: Firebase\n\n    private auth: firebase.auth.Auth\n    private authenticatedUser: firebase.auth.UserCredential | undefined;\n    private googleAuthenticationProvider = new firebase.auth.GoogleAuthProvider()\n    private loggedInUser: User | undefined\n\n    private constructor() {\n        firebase.initializeApp(config)\n        this.auth = firebase.auth()\n\n        \n    }\n\n    public static getInstance() {\n        if (!Firebase.instance) {\n            Firebase.instance = new Firebase();\n        }\n\n        return Firebase.instance;\n    }\n\n    public getDatabase(): firebase.database.Database {\n        return firebase.database()\n    }\n\n    public async authenticateUser(): Promise<void> {\n        let userCredentials = await this.auth.signInWithPopup(this.googleAuthenticationProvider)\n        await this.persistLoggedInUserInfo(userCredentials);\n    }\n\n    private async persistLoggedInUserInfo(userCredentials: firebase.auth.UserCredential) {\n\n        function generateRandomText(length: number) {\n            let result           = '';\n            let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            let charactersLength = characters.length;\n            for ( let i = 0; i < length; i++ ) {\n                result += characters.charAt(Math.floor(Math.random() * charactersLength));\n            }\n            return result;\n        }\n\n        let idToken = await userCredentials.user!.getIdToken()\n\n        console.log(\"Logged In User: \", userCredentials)\n\n        if (userCredentials.user) {\n            this.loggedInUser = new User()\n            this.loggedInUser.displayName = userCredentials.user.displayName || `${generateRandomText(5)}`\n            this.loggedInUser.idToken = idToken\n            this.loggedInUser.email = userCredentials.user.email || `${generateRandomText(5)}@retro.com`\n            this.loggedInUser.uid = userCredentials.user.uid || \"\"\n            this.loggedInUser.isEmailVerified = !userCredentials.user.isAnonymous;\n\n            let response = await request.post(\"/login\", userCredentials.user);\n            if (response.status === 200) {\n                localStorage.setItem(User.ID_TOKEN, idToken);\n                localStorage.setItem(User.USER_INFO, JSON.stringify(this.loggedInUser))\n                localStorage.setItem(User.REFRESH_TOKEN, userCredentials.user.refreshToken)\n            }\n        }\n\n\n    }\n\n    public getLoggedInUser(): User | undefined {\n        let loggedInUserJson = localStorage.getItem(User.USER_INFO)!;\n        if (loggedInUserJson)\n            return JSON.parse(loggedInUserJson) as User\n    }\n\n    public async isUserAuthenticated(): Promise<boolean> {\n        let refreshToken = localStorage.getItem(User.REFRESH_TOKEN);\n        let idToken = localStorage.getItem(User.ID_TOKEN);\n\n\n        if (refreshToken) {\n            if (idToken) {\n                let response = await fetch(`${SERVICE_URL}/token/verify?id_token=${idToken}`)\n                if (200 === response.status) {\n                    return true;\n                } else {\n                    let newIdToken = await fetch(`https://securetoken.googleapis.com/v1/token?key=${config.apiKey}`, {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            grant_type: \"refresh_token\",\n                            refresh_token: refreshToken\n                        })\n                    });\n                    let data = (await newIdToken.json()) as RefreshTokenResponse;\n                    localStorage.setItem(User.ID_TOKEN, data.id_token);\n                    localStorage.setItem(User.REFRESH_TOKEN, data.refresh_token);\n                }\n            }\n\n            console.log(\"User is authenticated!\");\n            return true;\n        }\n\n        console.log(\"User is not authenticated!\");\n        return false;\n    }\n\n    public getIdToken(): string {\n        return localStorage.getItem(User.ID_TOKEN)!;\n    }\n\n    public async authenticateAnonymousUser(): Promise<void> {\n        let userCredentials = await this.auth.signInAnonymously()\n        await this.persistLoggedInUserInfo(userCredentials)\n    }\n\n    logout() {\n        localStorage.clear()\n    }\n}\n\n\nexport default Firebase","import RetroBoard from \"../../models/RetroBoard\";\nimport RetroWalls from \"../../models/RetroWalls\";\nimport Note from \"../../models/Note\";\nimport Notes from \"../../models/Notes\";\n\nexport enum ActionTypes {\n    SORT,\n    GET_NOTES,\n    RETRIEVE_RETRO_BOARD,\n    UPDATE_NOTE,\n    DELETE_NOTE,\n    CREATE_NOTE,\n    CREATE_RETRO_WALLS,\n    CREATE_RETRO_BOARD,\n    REFRESH_WALLS\n}\n\nexport enum SortType {\n    NONE,\n    SORT_BY_VOTES,\n    SORT_BY_TIMESTAMP\n}\n\ninterface CreateRetroBoardAction {\n    type: typeof ActionTypes.CREATE_RETRO_BOARD\n    payload: RetroBoard\n}\n\ninterface CreateRetroWallsAction {\n    type: typeof ActionTypes.CREATE_RETRO_WALLS\n    payload: RetroWalls\n}\n\ninterface CreateNoteAction {\n    type: typeof ActionTypes.CREATE_NOTE\n    payload: Note\n}\n\ninterface UpdateNoteAction {\n    type: typeof ActionTypes.UPDATE_NOTE\n    payload: Note\n}\n\ninterface DeleteNoteAction {\n    type: typeof ActionTypes.DELETE_NOTE\n    payload: Note\n}\n\ninterface GetNotesAction {\n    type: typeof ActionTypes.GET_NOTES\n    payload: Notes\n}\n\ninterface Sort {\n    type: typeof ActionTypes.SORT\n    payload: SortType\n}\n\ninterface RefreshWalls {\n    type: typeof ActionTypes.REFRESH_WALLS\n    payload: RetroWalls\n}\n\nexport type RetroBoardActionTypes = CreateRetroBoardAction | CreateRetroWallsAction | CreateNoteAction |\n    UpdateNoteAction | DeleteNoteAction | GetNotesAction | Sort | RefreshWalls","import React, {FunctionComponent} from 'react'\n\nconst PageFooter: FunctionComponent = () => {\n\n    return <footer className=\"mt-auto font-small blue pt-sm-3\">\n        <div className=\"footer-copyright text-center py-1\">\n            <p><a href=\"https://www.bemyaficionado.com\">Made by <strong>Varun Shrivastava</strong></a>\n            </p>\n            <p><strong>TheRetroBoard©2021</strong></p>\n        </div>\n    </footer>\n} \n\nexport default PageFooter","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Button from \"react-bootstrap/Button\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {RouteComponentProps} from \"react-router\";\nimport Firebase from \"../../service/Firebase\";\n\ninterface Props extends RouteComponentProps {\n\n}\nconst PageHeader: React.FunctionComponent<Props> = (props:Props) => {\n    const logout = () => {\n        localStorage.clear();\n        props.history.push(\"/login\");\n    }\n\n    let loggedInUser = Firebase.getInstance().getLoggedInUser()!;\n\n    return <Navbar bg=\"light\" expand=\"lg\">\n        <Link to={\"/\"} className={\"navbar-brand\"}>Retro Board</Link>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n                <Link className={\"nav-link\"} to={\"/\"}>Home</Link>\n                {\n                    loggedInUser.isEmailVerified ?\n                        <Link className={\"nav-link\"} to={\"/teams\"}>Teams</Link>: <></>\n                }\n\n                {/*<Nav.Link href=\"#link\">Link</Nav.Link>*/}\n                {/*<NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">*/}\n                {/*    <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>*/}\n                {/*    <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>*/}\n                {/*    <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>*/}\n                {/*    <NavDropdown.Divider/>*/}\n                {/*    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>*/}\n                {/*</NavDropdown>*/}\n            </Nav>\n            <Button onClick={logout} variant={\"outline-primary\"}>\n                <i className={\"fa fa-sign-out\"} />\n            </Button>\n        </Navbar.Collapse>\n    </Navbar>\n}\n\nexport default withRouter(PageHeader)","import React from 'react'\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport Firebase from \"../../../service/Firebase\";\nimport Container from \"react-bootstrap/Container\";\nimport PageFooter from \"../PageFooter\";\nimport PageHeader from \"../PageHeader\";\nimport {Spinner} from \"react-bootstrap\";\n\ninterface Props extends RouteComponentProps {\n}\n\ninterface State {\n    isUserAuthenticated: boolean\n    isLoading: boolean\n}\n\nclass LayoutAuthenticated extends React.Component<Props, State> {\n\n    state: State = {\n        isUserAuthenticated: false,\n        isLoading: true\n    };\n\n    componentDidMount(): void {\n        Firebase.getInstance().isUserAuthenticated().then(response => {\n            this.setState({isUserAuthenticated: response, isLoading: false});\n        });\n    }\n\n    render(): JSX.Element {\n        if (this.state.isLoading) return <Spinner animation={\"border\"} />;\n        else if (this.state.isUserAuthenticated)\n            return <Container fluid={true} className={\"d-flex w-100 h-100 p-3 mx-auto flex-column\"}>\n                <PageHeader/>\n                {this.props.children}\n                <PageFooter/>\n            </Container>\n        else\n            return <Redirect to={{pathname: \"/login\", state: {referrer: this.props.location.pathname}}}/>\n    }\n}\n\nexport default withRouter(LayoutAuthenticated)","import React from 'react'\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport Firebase from \"../../../service/Firebase\";\n\ninterface Props extends RouteComponentProps {\n    success: () => void\n}\n\nclass LayoutUnauthenticated extends React.Component<Props> {\n\n    render(): JSX.Element {\n\n        const {pathname, search} = this.props.location\n\n        // if user is logged in and requests for login page\n        // then redirect it to home (/)\n        // otherwise, forward the request to original address\n        if (Firebase.getInstance().getLoggedInUser()) {\n            if (pathname.includes(\"login\"))\n                return <Redirect to={\"/\"}/>\n            return <Redirect to={`${pathname}${search}`}/>\n        }\n\n        return <>\n            {this.props.children}\n        </>\n    }\n}\n\nexport default withRouter(LayoutUnauthenticated)","import {RetroBoardModel} from \"../interfaces/RetroBoardModel\";\nimport {WallStyle} from \"../interfaces/StickyWallModel\";\n\n\nconst WENT_WELL_WALL_STYLE: WallStyle = {\n    stickyNote: {\n        backgroundColor: \"#009688\",\n        textColor: \"white\",\n        likeBtnPosition: \"right\"\n    }\n}\n\nconst TO_IMPROVE_WALL_STYLE: WallStyle = {\n    stickyNote: {\n        backgroundColor: \"#e91e63\",\n        textColor: \"white\",\n        likeBtnPosition: \"right\"\n    }\n}\n\nconst ACTION_ITEMS_WALL_STYLE: WallStyle = {\n    stickyNote: {\n        backgroundColor: \"#9c27b0\",\n        textColor: \"white\",\n        likeBtnPosition: \"right\"\n    }\n}\nexport const RETRO_BOARD_STYLES = {\n    wentWell: WENT_WELL_WALL_STYLE,\n    toImprove: TO_IMPROVE_WALL_STYLE,\n    actionItems: ACTION_ITEMS_WALL_STYLE\n}\n\nclass RetroBoard implements RetroBoardModel {\n    id: string\n    name: string\n    maxLikes:number\n    blur: \"on\" | \"off\"\n    userId: string\n\n    constructor(id:string, name:string, userId: string) {\n        this.id = id\n        this.name = name\n        this.maxLikes = 5\n        this.blur = \"off\"\n        this.userId = userId\n    }\n\n    public static newInstance(id:string, name:string, userId: string) {\n        return  new RetroBoard(id, name, userId);\n    }\n\n    public static toJSON(retroBoard: RetroBoard) {\n        return JSON.stringify(retroBoard)\n    }\n    \n    public static fromJSON(json:string): RetroBoard {\n        return JSON.parse(json) as RetroBoard\n    }\n}\n\nexport default RetroBoard","import RetroWall from \"./RetroWall\";\n\nclass RetroWalls {\n    retroBoardId: string = \"\"\n    walls: RetroWall[]\n    \n    constructor(retroWalls: RetroWall[]) {\n        this.walls = retroWalls\n    }\n    \n    public static toJSON(retroWalls:RetroWalls) {\n        return JSON.stringify(retroWalls)\n    }\n    \n    public static fromJSON(json:string): RetroWalls {\n        return JSON.parse(json)\n    }\n}\n\nexport default RetroWalls","import Note from \"./Note\";\n\nclass Notes {\n    get notes(): Note[] {\n        return [...this._notes];\n    }\n    \n    private readonly _notes: Note[]\n    \n    constructor(notes:Note[]) {\n        this._notes = this._removeDuplicates(notes)\n    }\n    \n    public static fromJSON(json:string): Notes {\n        \n        return JSON.parse(json)\n    }\n    \n    public static toJSON(notes: Notes): string {\n        return JSON.stringify(notes)\n    }\n    \n    private _removeDuplicates(notes: Note[]) {\n        let arr: Note[] = []\n        notes.forEach((note, index) => {\n            let itemIndex = arr.findIndex((item) => item.noteId === note.noteId)\n            if (itemIndex === -1)\n                arr.push(note)\n        })\n        return arr\n    }\n\n}\n\nexport default Notes","import RetroBoardState from \"./RetroBoardState\";\nimport RetroBoard from \"../../models/RetroBoard\";\nimport RetroWalls from \"../../models/RetroWalls\";\nimport Notes from \"../../models/Notes\";\nimport {ActionTypes, RetroBoardActionTypes, SortType} from \"../types/RetroBoardActionTypes\";\nimport Note from \"../../models/Note\";\n\nexport const initialState: RetroBoardState = {\n    retroBoard: new RetroBoard(\"\", \"\", \"\"),\n    retroWalls: new RetroWalls([]),\n    notes: new Notes([])\n}\n\nfunction sortByVotes(notes: Notes) {\n    return new Notes(notes.notes.sort((item1, item2) => {\n        let itemOneLikesCount = 0\n        let itemTwoLikesCount = 0\n\n        if (item1.likedBy)\n            itemOneLikesCount = item1.likedBy.length\n        if (item2.likedBy)\n            itemTwoLikesCount = item2.likedBy.length\n\n        return 0 - (itemOneLikesCount > itemTwoLikesCount ? 1 : -1)\n    }))\n}\n\nexport function retroBoardReducer(state = initialState, action: RetroBoardActionTypes): RetroBoardState {\n\n    switch (action.type) {\n        case ActionTypes.CREATE_RETRO_BOARD:\n            return {\n                ...state,\n                retroBoard: action.payload\n            }\n\n        case ActionTypes.CREATE_RETRO_WALLS:\n            return {\n                ...state,\n                retroWalls: action.payload,\n            }\n\n        case ActionTypes.CREATE_NOTE:\n            return {\n                ...state,\n                notes: new Notes([\n                    ...state.notes.notes,\n                    action.payload\n                ])\n            }\n\n        case ActionTypes.UPDATE_NOTE:\n            let modifiedNotes = state.notes.notes.map((note) =>\n                note.noteId === action.payload.noteId ? Object.assign({}, note, action.payload) : note)\n\n            return {\n                ...state,\n                notes: new Notes(modifiedNotes)\n            }\n\n        case ActionTypes.DELETE_NOTE:\n            let notes: Note[] = []\n            state.notes.notes.forEach((note) => {\n\n                if (note.noteId !== action.payload.noteId)\n                    notes.push(note)\n            })\n\n            return {\n                ...state,\n                notes: new Notes(notes)\n            }\n\n        case ActionTypes.GET_NOTES:\n            console.log(\"Get Notes: \", action.payload)\n            return {\n                ...state,\n                notes: action.payload\n            }\n\n        case ActionTypes.SORT:\n            switch (action.payload) {\n                case SortType.SORT_BY_VOTES:\n                    return {\n                        ...state,\n                        notes: sortByVotes(state.notes)\n                    }\n                case SortType.SORT_BY_TIMESTAMP:\n                    return {\n                        // TODO: sort notes by timestamp\n                        ...state\n                    }\n                default:\n                    return state\n            }\n\n        case ActionTypes.REFRESH_WALLS:\n            return {\n                ...state,\n                retroWalls: action.payload,\n                notes: new Notes([])\n            }\n\n\n    }\n    return initialState\n}","import {createLogger} from \"redux-logger\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport {initialState, retroBoardReducer} from \"../reducers/RetroBoardReducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport ReduxPromise from 'redux-promise'\n\nconst logger = createLogger();\n\nconst store = createStore(retroBoardReducer, initialState, composeWithDevTools(\n    applyMiddleware(ReduxPromise, logger),\n));\n\nexport default store;","import React, {FunctionComponent, useEffect, useState} from 'react'\nimport RetroBoard from \"../../../models/RetroBoard\";\nimport Card from \"react-bootstrap/Card\";\nimport {Row, Spinner} from 'react-bootstrap';\nimport Col from \"react-bootstrap/Col\";\nimport {Link} from \"react-router-dom\";\nimport Firebase from \"../../../service/Firebase\";\nimport Button from \"react-bootstrap/Button\";\nimport {RetroBoardService} from \"../../../service/RetroBoard/RetroBoardService\";\n\ninterface Props {\n    retroBoardService: RetroBoardService\n}\n\nconst MyBoards: FunctionComponent<Props> = ({retroBoardService}) => {\n\n    const [boards, setBoards] = useState<RetroBoard[]>([])\n    const [loader, setLoader] = useState<boolean>(false)\n\n\n    useEffect(() => {\n        async function _getMyBoards() {\n            let myBoards = await retroBoardService.getMyBoards()\n            setBoards(myBoards)\n        }\n        \n        _getMyBoards().catch((e) => console.log(\"User not logged In!\", e));\n    }, [retroBoardService])\n\n    const handleDelete = (board: RetroBoard) => {\n        setLoader(true)\n        retroBoardService.deleteBoard(board).then(boardId => {\n            setLoader(false)\n            setBoards(boards.filter(board => board.id !== boardId))\n        }).catch(e => {console.log(\"Error deleting board! \", e); setLoader(false)})\n    }\n\n    return <>\n        <Row>\n            {loader? <Spinner animation=\"grow\" variant={\"danger\"} style={{position: \"absolute\", top: \"50%\", left: \"50%\"}} />:<></>}\n            {boards.map((board, index) =>\n\n                <Col lg={\"4\"} key={index}>\n                    <Card>\n                        <Card.Body>\n                            <h4>{board.name}</h4>\n                        </Card.Body>\n                        <Card.Footer>\n                            <Link to={`/retro-board/${Firebase.getInstance().getLoggedInUser()!.uid}/${board.id}`}>URL</Link>\n                            <Button variant={\"link\"} className={\"pull-right\"} onClick={() => handleDelete(board)}>\n                                <i className={\"fa fa-trash-o fa-lg\"} style={{color: \"red\"}} />\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n                </Col>\n            )}\n        </Row>\n\n    </>\n}\n\nexport default MyBoards","import * as React from 'react';\nimport {useState} from 'react';\nimport {Button, Form, FormGroup, FormLabel} from \"react-bootstrap\";\n\ninterface Props {\n    title: string\n    onSubmit: (textVal:string) => void\n}\nconst EditText: React.FunctionComponent<Props> = (props:Props) => {\n\n    const [showForm, setForm] = useState(false);\n    const [textVal, setTextVal] = useState(\"\");\n\n    const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        setTextVal(e.currentTarget.value);\n    }\n\n    const handleSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        handleOnBlur();\n    }\n\n    const handleOnBlur = () => {\n        props.onSubmit(textVal);\n        setForm(false);\n    }\n\n    if (showForm) {\n        return <>\n            <Form onSubmit={(e:React.FormEvent<HTMLFormElement>) => handleSubmit(e)}>\n                <FormGroup>\n                    <Form.Control value={textVal} onBlur={handleOnBlur}\n                                  onChange={(e:React.ChangeEvent<HTMLInputElement>) => handleChange(e)} />\n                </FormGroup>\n            </Form>\n        </>\n    }\n\n    return <>\n        <FormLabel>\n            <span style={{fontSize: \"x-large\", fontWeight: \"bold\", marginRight: \"5px\"}}>{props.title}</span>\n            <Button variant={\"light\"} onClick={() => setForm(true)}><i className={\"fa fa-pencil-square-o\"} /></Button>\n        </FormLabel>\n    </>\n\n}\n\nexport default EditText;","import * as React from 'react';\nimport {useState} from 'react';\nimport {Dropdown, DropdownButton} from \"react-bootstrap\";\nimport {SwatchesPicker} from \"react-color\";\n\ninterface ColorPickerProps {\n    title: string\n    handleOnChangeComplete: (color: any) => void\n}\n\nconst ColorPicker: React.FunctionComponent<ColorPickerProps> = (props: ColorPickerProps) => {\n    const [color, setColor] = useState<any>(\"#ffffff\");\n    const handleChange = (color:any) => {\n        setColor(color);\n        props.handleOnChangeComplete(color);\n    }\n    return <>\n        <DropdownButton id=\"background_color_picker\" title={props.title} variant={\"light\"} >\n            <Dropdown.Item>\n                <SwatchesPicker color={color} onChangeComplete={handleChange} />\n            </Dropdown.Item>\n        </DropdownButton>\n    </>\n}\n\nexport default ColorPicker;","import React from 'react'\nimport {FormControl, InputGroup} from \"react-bootstrap\";\n\ninterface Props {\n    handleEnter: (note: string) => void,\n    noteText?: string\n}\ninterface EditorModel {\n    editorText: string\n}\n\nclass Editor extends React.Component<Props, EditorModel> {\n\n    constructor(props: Props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n    }\n    \n    state: EditorModel = {\n        editorText: this.props.noteText ? this.props.noteText : \"\"\n    }\n    \n    handleKeyboardKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Escape') {\n            this.props.handleEnter(this.state.editorText.replace(/\\n/g, \"\"))\n        }\n        if (e.key === 'Enter') {\n            this.setState({editorText: \"\"})\n            this.props.handleEnter(this.state.editorText.replace(/\\n/g, \"\"))\n        }\n    }\n    \n    handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        let editorText = e.currentTarget.value\n        this.setState({editorText: editorText})\n    }\n    \n    render() {\n        return <InputGroup>\n            <FormControl as={\"textarea\"} autoFocus\n                data-testid={\"editor_textarea\"}\n                onKeyUp={this.handleKeyboardKeyPress}\n                onChange={this.handleChange} value={this.state.editorText} aria-label={\"Note Editor\"} \n                onBlur={() => this.props.handleEnter(this.state.editorText.replace(/\\n/g, \"\"))}\n                />\n        </InputGroup>\n    }\n}\n\nexport default Editor","import React from 'react'\nimport User from \"../../../models/User\";\nimport {Badge, Card} from \"react-bootstrap\";\n\ninterface LikeProps {\n    stickyNoteId: string\n    likedBy: User[]\n    handleUpVote: (user:User) => void\n}\n\ninterface LikeState {\n    users: User[]\n}\n\nclass Like extends React.Component<LikeProps, LikeState> {\n\n    state: LikeState = {\n        users: this.props.likedBy\n    }\n\n    constructor(props: LikeProps) {\n        super(props)\n        this.handleUpVote = this.handleUpVote.bind(this)\n    }\n\n    handleUpVote(e:any) {\n        e.preventDefault()\n        // get the username from localstorage\n        let user: User = this.getCurrentUser() as User\n        \n        // add the user into the state array\n        if (user) {\n            this.props.handleUpVote(user)\n        }\n    }\n\n    private getCurrentUser(): User | undefined {\n        let userJson = localStorage.getItem(User.USER_INFO)\n        if (userJson)\n            return JSON.parse(userJson)\n        else\n            console.log(\"Error: User is not logged in!\", ) // TODO: show error message\n    }\n\n    render() {\n        \n        return <div data-testid={\"like_btn\"} onClick={this.handleUpVote}>\n            <Badge variant=\"dark\" style={{cursor: \"pointer\", margin: \"0\"}}><span data-testid={\"total_votes\"}>{this.props.likedBy.length}</span></Badge>\n            <Card.Link style={{color: \"white\"}} href={\"#\"}><i data-testid={\"like_thumbs_up\"} style={{color: \"darkgrey\"}} className={\"fa fa-thumbs-up\"}></i></Card.Link>\n        </div>\n    }\n}\n\nexport default Like","// @ts-ignore\nimport SockJS from \"sockjs-client\";\n// @ts-ignore\nimport Stomp from 'stompjs';\nimport User from \"../../models/User\";\nimport {SERVICE_URL} from \"../../env-config\";\n\nclass DuplexCommunication {\n\n    private static instance: DuplexCommunication;\n\n    static socket: any;\n    static stomp: any;\n\n    public static getInstance() {\n        if (! DuplexCommunication.instance)\n            DuplexCommunication.instance = new DuplexCommunication();\n        if (! DuplexCommunication.instance.isConnected())\n            DuplexCommunication.instance.connect();\n        return DuplexCommunication.instance;\n    }\n\n    private connect() {\n\n        if (this.isConnected()) return;\n\n        DuplexCommunication.socket = new SockJS(`${SERVICE_URL}/retro-websocket`);\n        DuplexCommunication.stomp = Stomp.over(DuplexCommunication.socket);\n        if (! this.isConnected()) {\n            let accessToken = localStorage.getItem(User.ID_TOKEN);\n            DuplexCommunication.stomp.connect({\n                        \"Authorization\": \"Bearer \" + accessToken\n                },\n                (success:any) => { console.log(\"Connected!\"); },\n                (error:any) => {\n\n                    console.log(\"Connection lost!!! Reload the page...\", error);\n                    // window.location.reload();\n                }\n            );\n        }\n    }\n\n    private isConnected() {\n        return DuplexCommunication.socket && DuplexCommunication.stomp && DuplexCommunication.stomp.connected;\n    }\n\n    public subscribe(topic: string, callback: (data: any) => void) {\n\n        console.log(\"trying subscribing to topic...\")\n        if (!DuplexCommunication.stomp)\n            this.connect()\n\n        // wait until the websocket connection has been established\n        let subscribeInterval = setInterval(() => {\n            if (DuplexCommunication.stomp.connected) {\n                window.clearInterval(subscribeInterval);\n                DuplexCommunication.stomp.subscribe(topic, (data: any) => {\n                    callback(data);\n                });\n            }\n        }, 1000);\n\n    }\n}\n\n// @ts-ignore\nexport default DuplexCommunication;","class UnauthorizedException implements Error {\n\n    status: number|undefined\n    message: string;\n    name: string;\n\n    constructor(name: string, message:string, status:number) {\n        this.name = name;\n        this.status = status;\n        this.message = message;\n    }\n\n}\n\nexport default UnauthorizedException;","import {RetroBoardService} from \"./RetroBoardService\";\nimport Note from \"../../models/Note\";\nimport RetroBoard from \"../../models/RetroBoard\";\nimport RetroWalls from \"../../models/RetroWalls\";\nimport Notes from \"../../models/Notes\";\nimport Firebase from \"../Firebase\";\nimport RetroWall from \"../../models/RetroWall\";\nimport DuplexCommunication from \"../WebSocket/DuplexCommunication\";\nimport {request} from \"../../env-config\";\nimport {Team} from \"../../models/Team\";\nimport UnauthorizedException from \"../UnauthorizedException\";\n\nclass RetroBoardServiceV2 implements RetroBoardService {\n\n    private static retroBoardService: RetroBoardService;\n\n    async addNewNote(newNote: Note): Promise<Note> {\n        let response = await request.post(\"/retro-board/walls/notes\", newNote);\n\n        if (201 === response.status) {\n            // request the new retro-board from the url and return the data\n            // let newNoteData = await request.get(response.headers.location!);\n            // let note = await newNoteData.data as Note;\n            return newNote;\n        }\n\n        throw Error(\"Error creating note in the backend!\");\n    }\n\n    async createNewRetroBoard({title, maxLikes}: { title: string; maxLikes: number }): Promise<RetroBoard> {\n        let loggedInUser = await Firebase.getInstance().isUserAuthenticated();\n        if (!loggedInUser) throw Error(\"Authentication Exception! User is not logged in.\");\n\n        let response = await request.post(\"/retro-board\",\n            {name: title, maxLikes: maxLikes});\n\n        if (201 === response.status) {\n            console.log(response);\n            console.log(response.headers.location);\n            // request the new retro-board from the url and return the data\n            let retroBoardResponse = await request.get(response.headers.location!);\n            let retroBoard = await retroBoardResponse.data as RetroBoard;\n            return retroBoard;\n        }\n\n        throw Error(\"Error creating RetroBoard in the backend!\");\n    }\n\n    async createRetroWalls(retroBoardId: string, retroWalls: RetroWalls): Promise<any | RetroWalls> {\n        try {\n            let retroWallsResponse = await request.get(`/retro-board/walls/${retroBoardId}`);\n            if (retroWallsResponse.status === 200)\n                return await retroWallsResponse.data as RetroWalls;\n        } catch (e) {\n            console.log(\"Creating Retro Walls!\");\n            // it should create three walls for the given retro board\n            // let retroWalls = new RetroWalls([\n            //     RetroWall.newInstance(retroBoardId, \"Went Well\", RETRO_BOARD_STYLES.wentWell, RetroBoardServiceV2.getInstance()).setWallOrder(1),\n            //     RetroWall.newInstance(retroBoardId, \"To Improve\", RETRO_BOARD_STYLES.toImprove, RetroBoardServiceV2.getInstance()).setWallOrder(2),\n            //     RetroWall.newInstance(retroBoardId, \"Action Items\", RETRO_BOARD_STYLES.actionItems, RetroBoardServiceV2.getInstance()).setWallOrder(3),\n            // ]);\n            retroWalls.retroBoardId = retroBoardId;\n\n            let response = await request.post(`/retro-board/walls`, retroWalls);\n\n            if (201 === response.status) {\n                // it should return the url for walls\n                let retroWallsResponse = await request.get(response.headers.location!);\n                return await retroWallsResponse.data as RetroWall;\n            }\n        }\n\n    }\n\n    async deleteBoard(board: RetroBoard): Promise<string> {\n        // it should cascade delete board, walls and notes\n        let response = await request.delete(`/retro-board/${board.id}`);\n        if (204 === response.status)\n            return board.id;\n\n        throw Error(\"Error deleting retro board in the backend!\");\n    }\n\n    async deleteNote(note: Note): Promise<Note> {\n        // it should delete the individual note by id\n        let response = await request.delete(`/retro-board/walls/notes`, {\n            params: {\n                noteId: note.noteId,\n                retroBoardId: note.retroBoardId\n            }\n        });\n        if (204 === response.status) return note;\n\n        throw Error(\"Error deleting note at the backend!\");\n    }\n\n    async getNotesDataOnUpdate(retroBoardId: string, retroWallId: string, callback: (notes: Notes) => void): Promise<void> {\n        // This code will only execute whenever a new note is created for the board\n        let duplex = DuplexCommunication.getInstance();\n        duplex.subscribe(`/topic/notes/${retroBoardId}`, async (uri: string) => {\n            let response = await request.get(`/retro-board/walls/notes`, {\n                params: {\n                    retroBoardId: retroBoardId,\n                    wallId: retroWallId,\n                }\n            });\n\n            callback(await response.data as Notes);\n        });\n\n        let response = await request.get(`/retro-board/walls/notes`, {\n            params: {\n                retroBoardId: retroBoardId,\n                wallId: retroWallId,\n            }\n        });\n\n        callback(await response.data as Notes);\n    }\n\n\n    async getMyBoards(): Promise<RetroBoard[]> {\n        let isAuth = await Firebase.getInstance().isUserAuthenticated();\n        console.log(\"IsUserAuthenticated: \" + isAuth);\n        if (isAuth) {\n            let response = await request.get(\"/retro-board\");\n            if (200 === response.status)\n                return await response.data as RetroBoard[];\n        }\n\n        throw Error(\"Error encountered while fetching boards for the user\");\n    }\n\n    async getNoteDataWhenModified(note: Note, callback: (note: Note) => void): Promise<void> {\n        DuplexCommunication.getInstance()\n            .subscribe(`/topic/notes/${note.noteId}`, async (uri: any) => {\n                console.log(\"URL:\", uri);\n                let response = await request.get(`${uri.body}`);\n                console.log(response.data);\n                callback(await response.data);\n            });\n    }\n\n\n    async getNotes(retroBoardId: string, wallId: string): Promise<Notes> {\n        let response = await request.get(`/retro-board/walls/notes/${retroBoardId}`);\n        if (200 === response.status) {\n            let notesData = await response.data as Notes;\n            return notesData;\n        }\n        throw Error(`Encountered Error while trying to fetch notes for ${retroBoardId} > ${wallId}`);\n    }\n\n    async getRetroBoardById(uid: string, retroBoardId: string): Promise<RetroBoard> {\n        let response = await request.get(`/retro-board/${retroBoardId}`);\n        if (200 === response.status) {\n            let retroBoard = await response.data as RetroBoard;\n            return retroBoard;\n        } else if (401 === response.status) {\n            throw new UnauthorizedException(\"Unauthorized\", \"User is not authorized to view the contents of this board.\", 401);\n        }\n\n        throw Error(\"Error encountered while fetching retro board from the server\");\n    }\n\n    async getRetroBoardDataOnUpdate(uid: string, retroBoardId: string, callback: (retroBoard: RetroBoard) => void): Promise<void> {\n        // This code will only execute whenever a change is made to the retro board\n        let duplex = new DuplexCommunication();\n        duplex.subscribe(`/topic/retro-board/${retroBoardId}`, async (uri: any) => {\n            console.log(\"URI : \", uri);\n            let response = await request.get(uri.body);\n            if (response.status === 200) {\n                callback(await response.data as RetroBoard);\n            }\n        });\n    }\n\n    async getRetroWalls(retroBoardId: string): Promise<RetroWalls> {\n        let response = await request.get(`/retro-board/walls/${retroBoardId}`);\n        if (200 === response.status) {\n            let retroWalls = await response.data as RetroWalls;\n            return retroWalls;\n        }\n\n        throw Error(`Error encountered while fetching retro walls for retro board (${retroBoardId})`);\n    }\n\n    async sortByVotes(notes: Notes): Promise<Notes> {\n        let sortedByVotes = notes.notes.sort((obj1, obj2) => obj1.likedBy.length - obj2.likedBy.length);\n        return new Notes(sortedByVotes);\n    }\n\n    async updateNote(modifiedNote: Note): Promise<Note> {\n        let response = await request.put(\"/retro-board/walls/notes\", modifiedNote);\n        if (204 === response.status) return modifiedNote;\n\n        throw Error(\"Error encountered while updating note in the backend.\");\n    }\n\n    async updateRetroBoard(retroBoard: RetroBoard): Promise<RetroBoard> {\n        let response = await request.put(\"/retro-board\", retroBoard);\n        if (204 === response.status) return retroBoard;\n\n        throw Error(\"Error encountered while updating note in the backend.\");\n    }\n\n    static getInstance() {\n        if (!this.retroBoardService)\n            this.retroBoardService = new RetroBoardServiceV2();\n        return this.retroBoardService;\n    }\n\n    async shareBoard(retroBoardId: string, selectedTeams: Array<Team>): Promise<boolean> {\n        let response = await request.post(\"/share\", {\n            itemId: retroBoardId,\n            teamIds: selectedTeams.map(selectedTeam => selectedTeam.teamId)\n        });\n        if (response.status === 201)\n            return true;\n        return false;\n    }\n}\n\nexport default RetroBoardServiceV2;","import {RetroBoardService} from \"./RetroBoardService\";\nimport RetroBoardServiceV2 from \"./RetroBoardServiceV2\";\n\nclass RetroBoardServiceFactory {\n\n    public static getInstance(): RetroBoardService {\n        return RetroBoardServiceV2.getInstance();\n    }\n}\n\nexport default RetroBoardServiceFactory;","import * as React from 'react';\nimport {createContext, useState} from 'react';\n\n\nexport interface BoardProps {\n    uid?: string\n    boardId?: \"\"\n    maxLikes: number\n    blur: string\n}\n\nexport const BoardContext = createContext<any>(null);\n\n\nexport const BoardContextProvider:React.FC = (props) => {\n\n    const [boardProps, setBoardProps] = useState<BoardProps>({\n        maxLikes: 0,\n        blur: \"off\"\n    });\n\n    return <BoardContext.Provider value={[boardProps, setBoardProps]}>\n        {props.children}\n    </BoardContext.Provider>\n\n}","import React, {ReactNode, useContext, useEffect, useState} from 'react'\nimport Card from \"react-bootstrap/Card\";\nimport Editor from \"../../dumb/boards/Editor\";\nimport Like from \"../../dumb/boards/Like\";\nimport User from \"../../../models/User\";\nimport Note from \"../../../models/Note\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Toast from \"react-bootstrap/Toast\";\nimport Firebase from \"../../../service/Firebase\";\nimport RetroBoardServiceFactory from \"../../../service/RetroBoard/RetroBoardServiceFactory\";\nimport ReactMarkdown from 'react-markdown';\nimport './sticky-note.css'\nimport {BoardContext, BoardContextProvider} from \"../../../redux/context/BoardContext\";\n\ninterface Props {\n    note: Note\n    deleteNote: (note: Note) => void\n    callBackWall: (note:Note) => void\n}\n\nconst StickyNote: React.FunctionComponent<Props> = (props: Props) => {\n    const [boardProps, setBoardProps] = useContext<any>(BoardContext);\n\n    const [thisNote, setThisNote] = useState<Note>(props.note);\n    const [showEditor, setShowEditor] = useState(false);\n    const [toast, setToast] = useState({show: false, message: \"\"});\n\n    const handleOnClick = () => {\n        console.log(\"Condition: \", thisNote.createdBy.includes(Firebase.getInstance().getLoggedInUser()!.uid));\n        console.log(`${props.note.createdBy} === ${Firebase.getInstance().getLoggedInUser()!.uid}`);\n        // only allow edit if the thisNote is created by the user\n        // do not allow people to edit others thisNote\n        if (props.note.createdBy.includes(Firebase.getInstance().getLoggedInUser()!.uid)) {\n            let noteText = thisNote.noteText\n            setShowEditor(true);\n        }\n    }\n\n    const modifyStickyNote = async (modifiedNote: Note) => {\n        let savedNote = await RetroBoardServiceFactory.getInstance().updateNote(modifiedNote);\n        setShowEditor(false);\n        // state is updated using the websocket callback method inside useEffect()\n        // setThisNote(savedNote);\n    }\n\n    const mergeNoteIfRequired = (note: Note): string | any => {\n        let blur = boardProps.blur === \"on\"\n                            && !note.createdBy.includes(Firebase.getInstance().getLoggedInUser()!.uid) ? \"blur(3px)\" : \"blur(0px)\"\n\n        let cardBodyContent: ReactNode = <div className={\"card-text\"} style={{width: \"95%\", filter: blur}}>\n            <ReactMarkdown source={note.noteText} escapeHtml={true}/>\n        </div>\n\n        if (note.noteText.includes(\"  \")) {\n            let mergedNotes = note.noteText.split(\"  \")\n                .map((noteText, index) => (<div key={index}>\n                    <ReactMarkdown source={noteText} escapeHtml={true}/>\n                    <hr/>\n                </div>))\n            cardBodyContent = <div className={\"card-text\"} style={{width: \"95%\", filter: blur}}>{mergedNotes}</div>\n        }\n\n        return cardBodyContent\n    }\n\n    const handleUpVote = async (currentUser: User) => {\n        let usersWhoUpVotedThisNote = thisNote.likedBy ?? [];\n        let thisUserHasVotedAlready = usersWhoUpVotedThisNote\n            .filter((u) => u.email === currentUser.email).length > 0;\n\n\n        // count total votes made by the current user\n        // on this board.\n        // This is done to check the max vote limit of this user.\n        let allNotesBelongingToCurrentBoard = await RetroBoardServiceFactory.getInstance().getNotes(boardProps.boardId, \"\");\n        let totalVotesByCurrentUser = 0;\n        allNotesBelongingToCurrentBoard.notes.forEach((note) => {\n            if (note.likedBy ? note.likedBy.some(u => u.uid === currentUser.uid) : false) {\n                totalVotesByCurrentUser++\n            }\n        });\n\n        let maxAllowedVotes = boardProps.maxLikes\n        if (!thisUserHasVotedAlready && totalVotesByCurrentUser < maxAllowedVotes) {\n            // make a service call to update the total votes\n            let modifiedNote = await RetroBoardServiceFactory.getInstance()\n                .updateNote({...thisNote, likedBy: [...thisNote.likedBy, currentUser]});\n            setThisNote(modifiedNote);\n        } else {\n            setToast({\n                show: true,\n                message: \"Like Count Limit Reached\"\n            });\n            // hide toast after 2 seconds.\n            setTimeout(() => {\n                setToast({...toast, show: false});\n            }, 2000);\n        }\n    }\n\n    const deleteNote = (note: Note) => {\n        props.deleteNote(note);\n    }\n\n\n    useEffect(() => {\n        RetroBoardServiceFactory.getInstance().getNoteDataWhenModified(props.note, (note: Note) => {\n            // check is for delete case\n            // if thisNote doesn't exist then it has been probably deleted.\n            if (note) {\n                setThisNote(note);\n                props.callBackWall(note);\n            }\n        })\n    }, []);\n\n    const cardBodyContent = mergeNoteIfRequired(thisNote);\n\n    return <BoardContextProvider>\n        <Card className={\"sticky-thisNote z-depth-5\"}\n              style={{backgroundColor: thisNote.style?.backgroundColor || \"white\"}}>\n            <Card.Body data-testid={\"card_body\"}\n                       style={{padding: \"5px\", fontFamily: \"sans-serif\", fontWeight: 500, minHeight: \"50px\"}}\n                       onClick={handleOnClick}>\n                <div data-testid={\"editor\"}\n                     style={{color: thisNote.style?.textColor || \"black\"}}>\n                    {\n                        showEditor ?\n                            <Editor noteText={thisNote.noteText}\n                                    handleEnter={(modifiedNoteText) => modifyStickyNote({\n                                        ...thisNote,\n                                        noteText: modifiedNoteText\n                                    })}/> :\n                            cardBodyContent\n                    }\n                </div>\n            </Card.Body>\n            <ul className={\"list-inline pull-right\"} style={{position: 'absolute', right: \"5px\", bottom: \"0px\"}}>\n                <li className=\"list-inline-item\">\n                    <Like key={`like_note.noteId`} handleUpVote={handleUpVote}\n                          likedBy={thisNote.likedBy || []}\n                          stickyNoteId={thisNote.noteId}\n                    />\n                </li>\n                <li className={\"list-inline-item\"}>\n                    <Badge data-testid={`delete_badge_${thisNote.noteId}`} variant={\"danger\"}\n                           style={{cursor: \"pointer\", padding: \"2px\", margin: \"0\"}}\n                           onClick={() => deleteNote(thisNote)}><i\n                        className=\"fa fa-trash-o\"></i></Badge>\n                </li>\n            </ul>\n            <Toast data-testid={\"toast\"} show={toast.show} style={{position: 'absolute', left: '50%'}}>\n                <Toast.Body>{toast.message}</Toast.Body>\n            </Toast>\n        </Card>\n    </BoardContextProvider>\n}\n\nexport default StickyNote;","import {StickyNoteStyle} from \"../interfaces/StickyNoteModel\";\nimport User from \"./User\";\n\nclass Note {\n    retroBoardId: string\n    wallId: string\n    noteId: string\n    noteText: string\n    style: StickyNoteStyle\n    likedBy: User[]\n    createdBy: string\n    \n    constructor(retroBoardId: string, wallId: string, noteText:string, style:StickyNoteStyle) {\n        this.retroBoardId = retroBoardId\n        this.wallId = wallId\n        this.noteId = String(Date.now())\n        this.noteText = noteText\n        this.style = style\n        this.likedBy = []\n        this.createdBy = \"\"\n    }\n\n    public static toJSON(note:Note): string {\n        return JSON.stringify(note)\n    }\n    \n    public static fromJSON(json:string): Note {\n        return JSON.parse(json)\n    }\n\n    \n}\n\nexport default Note","import * as React from \"react\";\nimport {Button, Col, Row} from \"react-bootstrap\";\nimport StickyNote from \"../../smart/boards/StickyNote\";\nimport {SortType} from \"../../../redux/types/RetroBoardActionTypes\";\nimport RetroBoardServiceFactory from \"../../../service/RetroBoard/RetroBoardServiceFactory\";\nimport BoardTemplate from \"../../../models/BoardTemplate\";\nimport Note from \"../../../models/Note\";\n\ninterface DisplayProps {\n    boardTemplate: BoardTemplate\n    removeWall: (index: number) => void\n}\n\nconst DisplayBoardTemplate: React.FunctionComponent<DisplayProps> = ({boardTemplate, removeWall}) => {\n\n    return <>\n        <Row>\n            {boardTemplate.walls.map((wall, index) => (\n                <Col key={index} className={\"justify-content-center text-center\"}>\n                    <h6>{wall.wallTitle} <Button onClick={() => removeWall(index)} variant={\"link\"}><i\n                        className={\"fa fa-times\"}/></Button></h6>\n                    {\n                        wall?.notes?.length > 0 ? wall.notes.map((note, index) => (\n                            <StickyNote key={index}\n                                        note={new Note(\"\",\"\", note.noteText, note.noteStyle)}\n                                        deleteNote={(note: Note) => {console.log(\"act as dummy in this context!\")}}\n                                        callBackWall={(note:Note) => {console.log(\"act as dummy in this context!\")}}/>\n                        )) : <StickyNote key={index}\n                                         note={new Note(\"\",\"\", \"Foo Bar\", wall.wallStyle.stickyNote)}\n                                         deleteNote={(note: Note) => {console.log(\"act as dummy in this context!\")}}\n                                         callBackWall={(note:Note) => {console.log(\"act as dummy in this context!\")}}/>\n                    }\n\n                </Col>\n            ))}\n        </Row>\n    </>\n}\n\nexport default DisplayBoardTemplate;","import * as React from 'react';\nimport {useState} from 'react';\nimport {Button, Col, Form, FormGroup, Modal, Row} from \"react-bootstrap\";\nimport {RETRO_BOARD_STYLES} from \"../../../models/RetroBoard\";\nimport './style.css';\nimport BoardTemplate, {TemplateWall} from \"../../../models/BoardTemplate\";\nimport EditText from \"../../dumb/EditText\";\nimport ColorPicker from \"../../dumb/ColorPicker\";\nimport DisplayBoardTemplate from \"./DisplayBoardTemplate\";\nimport Firebase from \"../../../service/Firebase\";\nimport {BoardContextProvider} from \"../../../redux/context/BoardContext\";\n\ninterface Props {\n    onCreateTemplate: (templateData: BoardTemplate) => void\n}\n\nconst CreateNewTemplate: React.FunctionComponent<Props> = (props: Props) => {\n\n    const [show, setShow] = useState(false);\n    const showModal = () => setShow(true);\n    const hideModal = () => setShow(false);\n\n    const [boardTemplate, setBoardTemplate] = useState<BoardTemplate>({\n        templateTitle: \"Template Title\",\n        walls: [],\n        templateId: \"\",\n        userId: Firebase.getInstance().getLoggedInUser()?.uid!\n    });\n    // const [retroWalls, setRetroWalls] = useState<RetroWalls>(new RetroWalls([]));\n    const [wallTitle, setWallTitle] = useState(\"\");\n    // const [notes, setNotes] = useState<Notes>(new Notes([]));\n    const [textColor, setTextColor] = useState<any>(\"#ffffff\");\n    const [backgroundColor, setBackgroundColor] = useState<any>(RETRO_BOARD_STYLES.wentWell.stickyNote.backgroundColor);\n\n    const updateTemplateTitle = (title: string) => {\n        setBoardTemplate({...boardTemplate, templateTitle: title});\n    }\n\n    const handleWallName = (e: React.ChangeEvent<HTMLInputElement>) => setWallTitle(e.currentTarget.value);\n    const addWall = () => {\n        let newTemplateWall: TemplateWall = {\n            wallTitle: wallTitle,\n            wallStyle: {\n                stickyNote: {\n                    backgroundColor: backgroundColor,\n                    textColor: textColor,\n                    likeBtnPosition: \"right\"\n                }\n            },\n            wallOrder: 1,\n            notes: [\n                {\n                    noteText: \"Lorem Epsum Dolor Sit amet\",\n                    noteStyle: {\n                        backgroundColor: backgroundColor,\n                        textColor: textColor,\n                        likeBtnPosition: \"right\"\n                    }\n                }\n            ]\n        };\n\n        setBoardTemplate({...boardTemplate, walls: [...boardTemplate.walls, newTemplateWall]});\n        setWallTitle(\"\");\n    }\n\n    const removeWall = (index: number) => {\n        setBoardTemplate({\n            ...boardTemplate,\n            walls: [...boardTemplate.walls.slice(0, index), ...boardTemplate.walls.slice(index + 1)]\n        })\n    }\n\n    const handleTextColor = (color: any) => setTextColor(color.hex)\n    const handleBackgroundColor = (color: any) => setBackgroundColor(color.hex);\n    const createTemplate = () => {\n\n        const payload:BoardTemplate = {...boardTemplate,\n            walls: boardTemplate.walls.map((wall, index) => {\n                return {...wall, wallOrder: index};\n            })}\n\n        props.onCreateTemplate(payload);\n        hideModal();\n    }\n\n    return <>\n        <Button variant={\"light\"} onClick={showModal} style={{padding: \"25px\", border: \"2px dashed\"}}>\n            <i className={\"fa fa-plus fa-lg\"}/>\n        </Button>\n        <Modal show={show} onHide={hideModal} dialogClassName={\"custom-modal\"}>\n            <Modal.Header>\n                <EditText onSubmit={(text) => updateTemplateTitle(text)} title={boardTemplate.templateTitle}/>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <FormGroup>\n                        <Row>\n                            <Form inline={true} onSubmit={(e: any) => e.preventDefault()}>\n                                <Col>\n                                    <Form.Control\n                                        placeholder={\"Wall Title\"}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWallName(e)}\n                                        value={wallTitle}\n                                        style={{padding: \"20px\", marginLeft: \"5px\"}}\n                                    />\n                                </Col>\n                                <Col style={{backgroundColor: textColor}}>\n                                    <ColorPicker title={\"Text Color\"} handleOnChangeComplete={handleTextColor}/>\n                                </Col>\n                                <Col style={{backgroundColor: backgroundColor}}>\n                                    <ColorPicker title={\"Background Color\"}\n                                                 handleOnChangeComplete={handleBackgroundColor}/>\n                                </Col>\n                                <Col>\n                                    <Button onClick={addWall} disabled={wallTitle === \"\"}>Add Wall</Button>\n                                </Col>\n                            </Form>\n                            <hr/>\n                        </Row>\n                    </FormGroup>\n                </Row>\n\n                <div style={{border: \"1px solid\", padding: \"20px\", margin: \"1px solid\"}}>\n                    <DisplayBoardTemplate boardTemplate={boardTemplate} removeWall={removeWall} />\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant={\"success\"} disabled={boardTemplate.walls.length === 0} onClick={createTemplate}>Create\n                    Template</Button>\n                <Button variant={\"light\"} onClick={hideModal}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default CreateNewTemplate;","import React, {FunctionComponent, useState} from 'react'\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\n\ninterface Props {\n    title:string\n    onCreateRetroBoard: (retroBoard:{title:string,maxLikes:number}) => void\n}\n\nconst CreateRetroBoard: FunctionComponent<Props> = ({onCreateRetroBoard, title}) => {\n    const [show, setShow] = useState(false)\n    const [formInput, setFormInput] = useState({title: \"\", maxLikes: 5})\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const handleChange = (name: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n        let value = e.currentTarget.value\n        setFormInput({...formInput, [name]: value})\n    }\n    const handleCreateRetroBoard = async () => {\n        onCreateRetroBoard(formInput);\n        handleClose();\n    }\n    \n    return <>\n        <Button variant=\"outline-primary\" onClick={handleShow}>\n            {title}\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Dashboard Title</Form.Label>\n                        <Form.Control name={\"title\"} type={\"text\"} placeholder={\"e.g. Spring 400 \"}\n                                      value={formInput.title} autoComplete={\"false\"}\n                                      onChange={handleChange(\"title\")}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Max Likes</Form.Label>\n                        <Form.Control name={\"maxLikes\"} type={\"number\"} placeholder={\"e.g. 5 or 6 \"}\n                                      onChange={handleChange(\"maxLikes\")} \n                                      autoComplete={\"false\"}\n                                      value={String(formInput.maxLikes)}/>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleCreateRetroBoard}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default CreateRetroBoard","import {WallStyle} from \"../interfaces/StickyWallModel\";\n\nclass RetroWall {\n    retroBoardId: string\n    wallId: string\n    title: string\n    style: WallStyle\n    sortCards: boolean\n    wallOrder: number = 1\n\n    constructor(retroBoardId:string, title: string, style: WallStyle) {\n        this.retroBoardId = retroBoardId\n        this.wallId = title.replace(/\\s/g, \"\")\n        this.title = title\n        this.style = style\n        this.sortCards = false\n    }\n    \n    public static newInstance(retroBoardId:string, title:string, style: WallStyle) {\n        return new RetroWall(retroBoardId, title, style)\n    }\n\n    public setWallOrder(wallOrder:number): RetroWall {\n        this.wallOrder = wallOrder;\n        return this;\n    }\n\n    \n}\n\nexport default RetroWall","import RetroBoard from \"../../models/RetroBoard\";\nimport {ActionTypes, RetroBoardActionTypes, SortType} from \"../types/RetroBoardActionTypes\";\nimport RetroWalls from \"../../models/RetroWalls\";\nimport Note from \"../../models/Note\";\nimport Notes from \"../../models/Notes\";\n\nclass RetroBoardActions {\n    \n    public createRetroBoard(retroBoard: RetroBoard): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.CREATE_RETRO_BOARD,\n            payload: retroBoard\n        }\n    }\n    \n    public createRetroWalls(retroWalls: RetroWalls): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.CREATE_RETRO_WALLS,\n            payload: retroWalls\n        }\n    }\n    \n    public createNote(note: Note): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.CREATE_NOTE,\n            payload: note\n        }\n    }\n    \n    public updateNote(note: Note): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.UPDATE_NOTE,\n            payload: note\n        }\n    }\n    \n    public deleteNote(note: Note): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.DELETE_NOTE,\n            payload: note\n        }\n    }\n\n    public getNotes(notes: Notes): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.GET_NOTES,\n            payload: notes\n        }\n    }\n\n    public sortByVotes(): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.SORT,\n            payload: SortType.SORT_BY_VOTES\n        };\n    }\n    \n    public sortByTimestamp(): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.SORT,\n            payload: SortType.SORT_BY_TIMESTAMP\n        };\n    }\n\n    public refreshRetroWalls(): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.REFRESH_WALLS,\n            payload: new RetroWalls([])\n        }\n    }\n}\n\nexport default RetroBoardActions","import * as React from 'react';\nimport CreateRetroBoard from \"./CreateRetroBoard\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport RetroWalls from \"../../../models/RetroWalls\";\nimport RetroWall from \"../../../models/RetroWall\";\nimport {useDispatch} from \"react-redux\";\nimport RetroBoardActions from \"../../../redux/actions/RetroBoardActions\";\nimport {TemplateWall} from \"../../../models/BoardTemplate\";\nimport RetroBoardServiceFactory from \"../../../service/RetroBoard/RetroBoardServiceFactory\";\n\ninterface Props extends RouteComponentProps {\n    title: string\n    templateWalls: Array<TemplateWall>\n}\n\nconst CreateBoardManager: React.FunctionComponent<Props> = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const handleCreateRetroBoard = async (boardInput: { title: string, maxLikes: number }) => {\n        let retroBoardService = RetroBoardServiceFactory.getInstance();\n        let retroBoardActions = new RetroBoardActions();\n        let retroBoard = await retroBoardService.createNewRetroBoard(boardInput);\n        dispatch(retroBoardActions.createRetroBoard(retroBoard));\n\n        console.log(\"Template Walls -> \", props.templateWalls);\n\n        let boardWalls = await retroBoardService.createRetroWalls(retroBoard.id, new RetroWalls(\n            props.templateWalls.map((templateWall, index) =>\n                RetroWall.newInstance(retroBoard.id, templateWall.wallTitle, templateWall.wallStyle)\n                    .setWallOrder(templateWall.wallOrder))));\n\n        props.history.push({\n            pathname: `/retro-board/${retroBoard.userId}/${retroBoard.id}`,\n            state: {walls: new RetroWalls(boardWalls)}\n        });\n    }\n\n    return <>\n        <CreateRetroBoard title={props.title} onCreateRetroBoard={handleCreateRetroBoard}/>\n    </>\n}\n\nexport default withRouter(CreateBoardManager);","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport CreateNewTemplate from \"../../dumb/templates/CreateNewTemplate\";\nimport BoardTemplate from \"../../../models/BoardTemplate\";\nimport TemplateService from \"../../../service/Templates/TemplateService\";\nimport {Button, Card, Col, Row} from \"react-bootstrap\";\nimport {RetroBoardService} from \"../../../service/RetroBoard/RetroBoardService\";\nimport CreateRetroBoardManager from \"../boards/CreateRetroBoardManager\";\nimport DisplayBoardTemplate from \"../../dumb/templates/DisplayBoardTemplate\";\nimport {BoardContextProvider} from \"../../../redux/context/BoardContext\";\n\ninterface Props extends RouteComponentProps {\n    templateService: TemplateService\n    retroBoardService: RetroBoardService\n}\n\nconst TemplateManager: React.FunctionComponent<Props> = (props: Props) => {\n\n    const [templates, setTemplates] = useState<Array<BoardTemplate>>([]);\n\n    const handleCreateTemplate = async (boardTemplate: BoardTemplate) => {\n        let persistedBoardTemplate = await props.templateService.createBoardTemplate(boardTemplate)\n        setTemplates([...templates, persistedBoardTemplate]);\n    };\n\n    const deleteTemplate = async (boardTemplate: BoardTemplate) => {\n        await props.templateService.deleteBoardTemplate(boardTemplate);\n        setTemplates(templates.filter(template => template.templateId !== boardTemplate.templateId));\n    }\n\n    useEffect(() => {\n        props.templateService.getBoardTemplates()\n            .then(boardTemplates => {\n                setTemplates(boardTemplates.templates);\n            });\n    }, [props.templateService]);\n\n    return <BoardContextProvider>\n        <Row>\n            <Col md={1}>\n                <CreateNewTemplate onCreateTemplate={handleCreateTemplate}/>\n            </Col>\n\n            {templates.map((template, index) => (\n                <Col key={index} md={3}>\n                    <Card>\n                        <Card.Body>\n                                <div key={index}>\n                                    <Card.Title>{template.templateTitle}</Card.Title>\n                                    <DisplayBoardTemplate boardTemplate={template}\n                                                          removeWall={(index) => console.log(\"Test Button Clicked!\")}/>\n                                </div>\n                        </Card.Body>\n                        <Card.Footer>\n                            <CreateRetroBoardManager title={\"Create Board\"}\n                                                     templateWalls={template.walls}/>\n\n                            <Button className={\"pull-right\"} variant={\"light\"} onClick={() => deleteTemplate(template)}>\n                                <i className={\"fa fa-trash-o fa-lg\"} style={{color: \"red\"}}/>\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n                </Col>\n            ))}\n\n        </Row>\n\n    </BoardContextProvider>\n}\n\nexport default withRouter(TemplateManager);","import React, {useEffect} from 'react';\nimport {HomePageModel} from \"../interfaces/HomePageModel\"\nimport {Col, Container, Row} from \"react-bootstrap\"\nimport MyBoards from \"../components/smart/boards/MyBoards\";\nimport TemplateManager from \"../components/smart/templates/TemplateManager\";\nimport {RETRO_BOARD_STYLES} from \"../models/RetroBoard\";\nimport CreateRetroBoardManager from \"../components/smart/boards/CreateRetroBoardManager\";\n\nconst HomePage:React.FunctionComponent<HomePageModel> = (props:HomePageModel) => {\n\n    useEffect(() => {\n        document.title = \"Home\";\n    }, []);\n\n    return <Container>\n        <Row>\n            <Col>\n                <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                    <h3>Pre-built Templates</h3>\n                </div>\n                <CreateRetroBoardManager title={\"Create Retro Board\"}\n                                         templateWalls={[\n                    {wallTitle: \"Went Well\", wallStyle: RETRO_BOARD_STYLES.wentWell, wallOrder: 1, notes: []},\n                    {wallTitle: \"To Improve\", wallStyle: RETRO_BOARD_STYLES.toImprove, wallOrder: 2, notes: []},\n                    {wallTitle: \"Action Items\", wallStyle: RETRO_BOARD_STYLES.actionItems, wallOrder: 3, notes: []}\n                ]}/>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                    <h3>My Templates</h3>\n                </div>\n                <TemplateManager retroBoardService={props.retroBoardService}\n                                 templateService={props.templateService}/>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                    <h3>My Boards</h3>\n                </div>\n                <MyBoards retroBoardService={props.retroBoardService}/>\n            </Col>\n        </Row>\n    </Container>\n}\n\nexport default HomePage","import React from 'react'\nimport {Button} from \"react-bootstrap\";\nimport Editor from \"./Editor\";\n\ninterface State {\n    showEditor: boolean\n}\n\ninterface Props {\n    addNote: (note: string) => void\n}\n\nclass AddNewNote extends React.Component<Props, State> {\n\n    state: State = {\n        showEditor: false\n    }\n    \n    constructor(props: Props) {\n        super(props)\n        this.showEditor = this.showEditor.bind(this)\n        this.handleEnter = this.handleEnter.bind(this)\n    }\n\n    showEditor() {\n        \n        this.setState({showEditor: true})\n    }\n    \n    handleEnter(note: string) {\n        if (\"\" === note)\n            return ;\n        this.props.addNote(note)\n        this.setState({showEditor: false})\n    }\n\n    render() {\n        if (this.state.showEditor) {\n            return <div style={{margin: \"5px\"}}>\n                <Editor handleEnter={this.handleEnter} />\n            </div>\n        }\n        return <div style={{margin: \"5px\"}}>\n            <Button title={\"Add new note\"} data-testid={\"add_new_note_btn\"} variant={\"dark\"} onClick={this.showEditor}>\n                <i className={\"fa fa-lg fa-plus\"}></i>\n            </Button>\n        </div>\n    }\n}\n\nexport default AddNewNote","import * as React from 'react'\nimport {useState} from 'react'\nimport {Button, Carousel, Modal} from \"react-bootstrap\";\n\ninterface Props {\n    items: Array<string>\n    style: {textColor: string, backgroundColor: string}\n}\n\nconst CarouselView: React.FunctionComponent<Props> = (props: Props) => {\n\n    const [carouselView, setCarouselView] = useState(false);\n    const [index, setIndex] = useState(0);\n\n    const handleSelect = (selectedIndex: number) => setIndex(selectedIndex);\n\n    const showCarouselView = () => setCarouselView(true);\n\n    const hideCarouselView = () => setCarouselView(false);\n\n    const formatText = (text: string) => {\n        if (! text.includes(\"<MERGE_NOTE>\")) {\n            return <span>{text}</span>\n        }\n\n        return text.split(\"<MERGE_NOTE>\")\n            .map((noteText, index) => (\n                <span key={index}>\n                        {noteText}\n                    <br/>\n                        <hr style={{borderTop: \"1px dashed\"}}/>\n                </span>));\n    }\n\n    return <>\n        <div style={{margin: \"5px\"}}>\n            <Button title={\"Retrospect\"} variant={\"link\"} onClick={showCarouselView}>\n                <i className={\"fa fa-lg fa-eye\"} />\n            </Button>\n        </div>\n\n        <>\n            <Modal show={carouselView} onHide={hideCarouselView} style={{backgroundColor: \"black\"}}>\n                <Modal.Body style={{backgroundColor: props.style.backgroundColor}}>\n                    <Carousel activeIndex={index} onSelect={handleSelect} interval={null}>\n                        {props.items.map((text, index) => (\n                            <Carousel.Item key={index}>\n                                <div style={{height: \"400px\"}}>\n                                    <Carousel.Caption style={{color: props.style.textColor}}>\n                                        <div style={{height: \"200px\", overflowY: \"scroll\"}}>\n                                            <h3 style={{overflowY: \"scroll\"}}>{formatText(text)}</h3>\n                                        </div>\n                                    </Carousel.Caption>\n                                </div>\n                            </Carousel.Item>\n                        ))}\n                    </Carousel>\n                </Modal.Body>\n            </Modal>\n        </>\n    </>\n}\n\nexport default CarouselView;","import React, {useEffect, useState} from 'react'\nimport StickyNote from \"./StickyNote\";\nimport AddNewNote from \"../../dumb/boards/AddNewNote\";\nimport {Col, ListGroup, ListGroupItem, Row} from \"react-bootstrap\";\nimport Note from \"../../../models/Note\";\nimport Firebase from \"../../../service/Firebase\";\nimport RetroWall from \"../../../models/RetroWall\";\nimport {SortType} from \"../../../redux/types/RetroBoardActionTypes\";\nimport RetroBoardServiceFactory from \"../../../service/RetroBoard/RetroBoardServiceFactory\";\nimport CarouselView from \"../../dumb/CarouselView\";\nimport Notes from \"../../../models/Notes\";\n\ninterface Props {\n    sortBy?: SortType\n    wall: RetroWall\n    callBack: () => Promise<void>\n}\n\nconst StickyWall:React.FunctionComponent<Props> = (props:Props) => {\n    const [notes, setNotes] = useState<Array<Note>>([]);\n\n    /**\n     * add a new note to the wall\n     * makes a service call to the backend\n     * @param note\n     */\n    const addNote = async (note:string) => {\n        let newNote = new Note(props.wall.retroBoardId, props.wall.wallId, note, {\n            backgroundColor: props.wall.style?.stickyNote?.backgroundColor || \"white\",\n            textColor: props.wall.style?.stickyNote?.textColor || \"black\",\n            likeBtnPosition: props.wall.style?.stickyNote?.likeBtnPosition || \"right\"\n        })\n        newNote.createdBy = Firebase.getInstance().getLoggedInUser()!.email;\n        setNotes([...notes, await RetroBoardServiceFactory.getInstance().addNewNote(newNote)]\n            .sort((n1, n2) => n2.likedBy.length - n1.likedBy.length));\n        props.callBack();\n    }\n\n    const handleDrop = async (e: React.DragEvent<HTMLAnchorElement>, droppedOnNote: Note) => {\n        const draggedNote = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as Note\n        if (draggedNote.noteId === droppedOnNote.noteId)\n            return\n\n        droppedOnNote.noteText += \"  \" + draggedNote.noteText; // markdown for line-break\n        let modifiedNotes = notes.map((note) =>\n            note.noteId === draggedNote.noteId ? Object.assign({}, note, droppedOnNote.noteText) : note)\n\n        let note:Note = notes.find(note => note.noteId === droppedOnNote.noteId)!;\n        note.noteText = droppedOnNote.noteText;\n\n        // service calls to delete and update the notes\n        let boardService = RetroBoardServiceFactory.getInstance();\n        let updatedNote = await boardService.updateNote(note);\n        let deletedNote = notes.find(note => note.noteId === draggedNote.noteId)!;\n        await boardService.deleteNote(deletedNote);\n\n        setNotes(modifiedNotes);\n        props.callBack();\n    }\n\n    const handleDragOver = (e: React.DragEvent<HTMLAnchorElement>) => {\n        e.preventDefault()\n        e.dataTransfer.dropEffect = \"move\"\n    }\n\n    const handleDragStart = (e: React.DragEvent<HTMLAnchorElement>, note: Note) => {\n        e.dataTransfer.setData(\"text/plain\", JSON.stringify(note))\n    }\n\n    const deleteNote = async (noteToDeleted:Note) => {\n        await RetroBoardServiceFactory.getInstance().deleteNote(noteToDeleted);\n        setNotes([...notes.filter(note => note.noteId !== noteToDeleted.noteId)]);\n    }\n\n    const modifyNoteCallback = (note:Note) => {\n        let wallNotes = [...notes];\n        let modifiedNote = wallNotes.find(wallNote => wallNote.noteId === note.noteId)!;\n        modifiedNote.likedBy = note.likedBy;\n        modifiedNote.noteText = note.noteText;\n\n        setNotes(wallNotes.sort((n1,n2) => n2.likedBy.length - n1.likedBy.length));\n    }\n\n    /**\n     * This is the starting point of this page\n     * replacement of componentDidMount()\n     */\n    useEffect(() => {\n        const getNotes = async () => {\n            setNotes((await RetroBoardServiceFactory.getInstance().getNotes(props.wall.retroBoardId, props.wall.wallId))\n                .notes\n                .sort((n1,n2) => n2.likedBy.length - n1.likedBy.length));\n        };\n        RetroBoardServiceFactory.getInstance().getNotesDataOnUpdate(props.wall.retroBoardId, props.wall.wallId, async (data: Notes) => {\n            console.log(\"Notes Data Changed!\")\n            setNotes(data.notes.sort((n1,n2) => n2.likedBy.length - n1.likedBy.length));\n        });\n\n        getNotes();\n    }, []);\n\n    let filteredNotes = notes.filter(note => note.wallId === props.wall.wallId);\n    let stickers = filteredNotes.map((stickyNote: Note, index: number) => (\n        <ListGroupItem key={index} style={{padding: \"0px\", border: \"none\", marginBottom: \"2px\"}}\n                       className={\"text-left\"}\n                       id={`list_group_item_${index}`}\n                       draggable={true}\n                       onDragStart={(e: React.DragEvent<HTMLAnchorElement>) => handleDragStart(e, stickyNote)}\n                       onDragOver={handleDragOver}\n                       onDrop={(e: React.DragEvent<HTMLAnchorElement>) => handleDrop(e, stickyNote)}\n        >\n            <StickyNote key={stickyNote.noteId}\n                        note={stickyNote}\n                        callBackWall={modifyNoteCallback}\n                        deleteNote={deleteNote}/>\n        </ListGroupItem>\n\n    ))\n\n    return <section className=\"sticky-wall text-center\">\n        <h3>{props.wall.title} </h3>\n        <Row>\n            <Col>\n                <CarouselView items={notes.map(note => note.noteText)} style={{textColor: notes[0]?.style.textColor, backgroundColor: notes[0]?.style.backgroundColor}} />\n            </Col>\n        </Row>\n        <AddNewNote addNote={addNote}/>\n        <ListGroup>\n            {stickers}\n        </ListGroup>\n    </section>\n}\n\nexport default StickyWall;\n\n\n/*\n       // this method is called whenever there is a change in the properties\n       public static getDerivedStateFromProps(props: StickyWallModel, state: State) {\n           if (props.sortCards) {\n               let notes = [...props.stickyNotes]\n               notes = notes.sort((a, b) => {\n                   if (a.likedBy.length > b.likedBy.length)\n                       return -1\n                   if (a.likedBy.length < b.likedBy.length)\n                       return 1\n                   return 0\n               }).slice()\n               return {notes: notes}\n           }\n       }\n   */","import * as React from 'react'\nimport {useState} from 'react'\nimport {Alert, Button, Form, FormGroup, Modal, ProgressBar} from \"react-bootstrap\";\nimport {Team} from \"../../models/Team\";\n\ninterface Props {\n    teams: Array<Team>\n    shareWith: (selectedTeams: Array<Team>) => Promise<boolean>\n}\n\nconst ShareBoard: React.FunctionComponent<Props> = (props: Props) => {\n    const teams = props.teams ? props.teams : [];\n\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleOpen = () => setShow(true);\n    const [pageLoader, setPageLoader] = useState(false);\n    const [selectedTeams, setSelectedTeams] = useState<Array<Team>>([]);\n    const [response, setResponse] = useState<React.ReactNode>(undefined);\n\n    const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const selectedItems = e.currentTarget.selectedOptions;\n        const selectedTeams: Array<Team> = [];\n        for (let index = 0; index < selectedItems.length; index++) {\n            selectedTeams.push(\n                props.teams.find((team) => team.teamId === selectedItems[index].value)!\n            );\n        }\n\n        setSelectedTeams(selectedTeams);\n    }\n\n    const handleSubmit = async () => {\n        setPageLoader(true);\n        let response = await props.shareWith(selectedTeams);\n        if (response === true) {\n            setResponse(\n                <Alert variant={\"success\"}>\n                    <i className={\"fa fa-check\"} style={{color: \"green\"}}/>\n                    Page is now shared with the selected teams.\n                </Alert>\n            )\n        } else {\n            setResponse(<Alert variant={\"danger\"}>Cannot share the page. Contact admin.</Alert>)\n        }\n        setPageLoader(false);\n    }\n\n    return <>\n        <Button style={{border: \"1px solid black\"}} variant={\"light\"} onClick={handleOpen}>\n            <i className={\"fa fa-share-alt\"}/>\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                    <FormGroup>\n                        <Form.Label><h3>Share with:</h3></Form.Label>\n                        <Form.Control as={\"select\"} multiple\n                                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => handleChange(e)}>\n                            <option disabled={true}>Select teams to share</option>\n                            {teams.map((team, index) => (\n                                <option key={index} value={team.teamId}>{team.teamName}</option>\n                            ))}\n                        </Form.Control>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button type={\"submit\"} variant={\"success\"}>Share</Button>\n                        <Button onClick={handleClose} variant={\"light\"}>Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Modal.Body>\n            {pageLoader ? <Modal.Footer>\n                {pageLoader ? <><ProgressBar animated={true}/>{response}</> : <>{response}</>}\n            </Modal.Footer> : <>{response}</>}\n\n        </Modal>\n    </>\n}\n\nexport default ShareBoard","import {Team, TeamListResponse, TeamMemberListResponse} from \"../../models/Team\";\nimport {request} from \"../../env-config\";\nimport User from \"../../models/User\";\n\nclass TeamsServiceV1 {\n\n    static instance:TeamsServiceV1;\n\n    public static getInstance():TeamsServiceV1 {\n        if (!TeamsServiceV1.instance)\n            TeamsServiceV1.instance = new TeamsServiceV1();\n        return TeamsServiceV1.instance;\n    }\n\n    public async createNewTeam(team: Team) {\n        let response = await request.post(\"/teams\", team);\n        if (response.status === 201) {\n            let newTeamResponse = await request.get(response.headers.location);\n            return newTeamResponse.data as Team;\n        }\n\n        throw Error(\"Encountered some trouble while trying to create new team!\");\n    }\n\n    public async addTeamMember(teamId: string, teamMemberEmail: string): Promise<TeamMemberListResponse> {\n        let response = await request.post(\"/teams/member\", {teamId: teamId, userEmail: teamMemberEmail});\n        if (response.status === 201) {\n            let teamsResponse = await request.get(response.headers.location);\n            if (teamsResponse.status === 200)\n                return await teamsResponse.data as TeamMemberListResponse;\n        }\n\n        throw Error(\"Member cannot be added. Response Status: \" + response.status);\n    }\n\n    public async removeTeamMember(team: Team, teamMember: User) {\n        let response = await request.delete(`/teams/${team.teamId}/member/${teamMember.uid}`)\n        if (204 !== response.status)\n            throw Error(\"error deleting team member. Status: \" + response.status);\n    }\n\n    public async getTeamMember(teamMemberEmail: string) {\n        let response = await request.get(\"/users\", {\n            params: {email: teamMemberEmail}\n        });\n\n        if (response.status === 200) {\n            return response.data as User;\n        }\n\n        throw Error(\"No user found! Response Status: \" + response.status);\n    }\n\n    public async deleteTeam(team: Team) {\n        let response = await request.delete(`/teams/${team.teamId}`);\n        if (response.status !== 204) {\n            throw Error(\"Encountered problem while deleting the team. Response Status: \" + response.status);\n        }\n    }\n\n    public async getMyTeams(): Promise<TeamListResponse> {\n        let response = await request.get(\"/teams\");\n        if (response.status === 200) {\n            return await response.data as TeamListResponse;\n        }\n        return {teams: []};\n    }\n\n    public async getTeamMembers(teamId: string): Promise<TeamMemberListResponse> {\n        let response = await request.get(`/teams/${teamId}/members`);\n        if (response.status === 200) {\n            return await response.data as TeamMemberListResponse;\n        }\n\n        throw Error(\"Error while trying to fetch team members for team ID: \" + teamId);\n    }\n}\n\nexport default TeamsServiceV1;","import TeamsServiceV1 from \"./TeamsServiceV1\";\n\nclass TeamsServiceFactory {\n\n    public static getInstance() {\n        return TeamsServiceV1.getInstance();\n    }\n}\n\nexport default TeamsServiceFactory;","import * as React from 'react';\nimport {useContext} from 'react';\nimport Firebase from \"../../service/Firebase\";\nimport {Form, InputGroup} from \"react-bootstrap\";\nimport {BoardContext} from \"../../redux/context/BoardContext\";\nimport RetroBoardServiceFactory from \"../../service/RetroBoard/RetroBoardServiceFactory\";\n\ninterface Props {\n    callback: () => void\n}\n\nconst BlurToggle: React.FunctionComponent = () => {\n    const [boardProps, setBoardProps] = useContext<any>(BoardContext);\n\n    // if the board is not created by the logged in user\n    // then do not show the blur feature\n    if (boardProps.uid !== Firebase.getInstance().getLoggedInUser()!.uid) {\n        return <></>\n    }\n\n    const handleChange = async (val: \"on\" | \"off\") => {\n        // save the state in the backend\n        // the overall state update will happen at the listener in RetroBoardPage inside useEffect()\n        let board = await RetroBoardServiceFactory.getInstance().getRetroBoardById(boardProps.uid, boardProps.boardId);\n        board.blur = val;\n        await RetroBoardServiceFactory.getInstance().updateRetroBoard(board);\n    }\n\n    let isChecked = boardProps.blur === \"on\";\n\n    return <div className={\"blur-toggle-wrapper\"}>\n        <InputGroup>\n            <Form.Check\n                checked={isChecked}\n                type={\"switch\"}\n                id={\"switch_on\"}\n                label={\"Blur On\"}\n                onChange={() => handleChange(isChecked ? \"off\" : \"on\")}\n            />\n        </InputGroup>\n    </div>\n}\n\nexport default BlurToggle;","import React, {useContext, useEffect, useState} from 'react'\nimport StickyWall from \"../components/smart/boards/StickyWall\";\nimport {Button, Col, Row} from \"react-bootstrap\";\nimport {RouteComponentProps} from \"react-router\";\nimport RetroBoard from \"../models/RetroBoard\";\nimport RetroWalls from \"../models/RetroWalls\";\nimport {SortType} from \"../redux/types/RetroBoardActionTypes\";\nimport Notes from \"../models/Notes\";\nimport {CSVLink} from \"react-csv\";\nimport {Data, LabelKeyObject} from \"react-csv/components/CommonPropTypes\";\nimport ShareBoard from \"../components/dumb/ShareBoard\";\nimport {Team, TeamListResponse} from \"../models/Team\";\nimport UnauthorizedException from \"../service/UnauthorizedException\";\nimport RetroBoardServiceFactory from \"../service/RetroBoard/RetroBoardServiceFactory\";\nimport TeamsServiceFactory from \"../service/Teams/TeamsServiceFactory\";\nimport {withRouter} from \"react-router-dom\";\nimport {BoardContext} from \"../redux/context/BoardContext\";\nimport BlurToggle from \"../components/dumb/BlurToggle\";\n\ninterface CSVTemplate {\n    data: Data,\n    headers: LabelKeyObject[]\n}\n\ninterface Props extends RouteComponentProps<{}, any, { walls: RetroWalls } | any> {\n    uid?: string\n    retroBoardId?: string\n}\n\nconst RetroBoardPage: React.FunctionComponent<Props> = (props: Props) => {\n\n    let {retroBoardId, uid} = props.match.params as Props;\n    if (retroBoardId === undefined)\n        throw Error(\"Board ID is null!!!\");\n    localStorage.setItem(\"retroBoardId\", retroBoardId!);\n\n    const [boardProps, setBoardProps] = useContext<any>(BoardContext);\n\n    const [boardId, setBoardId] = useState(\"\");\n    const [boardTitle, setBoardTitle] = useState(\"\");\n    const [sortSelectValue, setSortSelectValue] = useState<SortType>(SortType.NONE);\n    const [teams, setTeams] = useState<Array<Team>>([]);\n    const [walls, setWalls] = useState<RetroWalls>(new RetroWalls([]));\n    const [csvData, setCSVData] = useState<CSVTemplate>({data: [], headers: []});\n\n    /**\n     * converts the given JSON data into CSV file\n     * the converted file can then be downloaded\n     */\n    const convertJsonToCsv = async (): Promise<void> => {\n        let headers: LabelKeyObject[] = [\n            {label: \"Wall Name\", key: \"wallName\"},\n            {label: \"Note\", key: \"noteText\"},\n            {label: \"Up-votes\", key: \"upvotes\"}\n        ]\n\n        // fetch all notes for the board\n        let walls = await RetroBoardServiceFactory.getInstance().getRetroWalls(retroBoardId!);\n        let notes: Notes = await RetroBoardServiceFactory.getInstance().getNotes(retroBoardId!, \"\");\n        console.log(\"Retro Board Id: \", notes);\n\n        let data: Data = [];\n        walls.walls.forEach(wall => {\n            let wallNotes = notes.notes.filter(note => note.wallId === wall.wallId);\n            wallNotes.forEach(note => {\n                data.push({wallName: wall.title, noteText: note.noteText, upvotes: note.likedBy?.length ?? 0});\n            })\n        })\n\n        console.log(\"CSV DAtA: \", data);\n        setCSVData({data: data, headers: headers});\n    }\n\n    /**\n     * Shares the board with the selected teams\n     * @param selectedTeams\n     */\n    const shareBoardWith = async (selectedTeams: Array<Team>): Promise<boolean> => {\n        try {\n            return await RetroBoardServiceFactory.getInstance().shareBoard(boardId, selectedTeams);\n        } catch (e) {\n            return false;\n        }\n    }\n\n\n    let wallsData = walls.walls.map((wall, index) => {\n        let {retroBoardId} = props.match.params as Props\n        wall.retroBoardId = retroBoardId!\n        return <Col key={index}>\n            <StickyWall wall={wall}\n                        sortBy={sortSelectValue}\n                        callBack={convertJsonToCsv}\n            />\n        </Col>\n    });\n\n    useEffect(() => {\n        if (retroBoardId && uid) {\n            // this code will always run when board will be updated in the backend\n            RetroBoardServiceFactory.getInstance().getRetroBoardDataOnUpdate(uid, retroBoardId, async (retroBoard: RetroBoard) => {\n                setBoardProps({\n                    ...boardProps,\n                    uid: uid,\n                    boardId: retroBoard.id,\n                    maxLikes: retroBoard.maxLikes,\n                    blur: retroBoard.blur\n                });\n            });\n            const initRetroBoard = async (boardId: string, uid: string) => {\n                try {\n\n                    let retroBoardService = RetroBoardServiceFactory.getInstance();\n                    let teamListResponse: TeamListResponse = await TeamsServiceFactory.getInstance().getMyTeams();\n                    let retroBoard = await retroBoardService.getRetroBoardById(uid, boardId);\n                    let walls = await retroBoardService.getRetroWalls(retroBoardId!);\n                    await convertJsonToCsv();\n                    document.title = retroBoard.name;\n\n                    setBoardProps({\n                        ...boardProps,\n                        boardId: retroBoard.id,\n                        maxLikes: retroBoard.maxLikes,\n                        uid: uid,\n                    })\n                    setBoardId(boardId);\n                    setBoardTitle(retroBoard.name);\n                    setTeams(teamListResponse.teams);\n                    setWalls(walls);\n\n                } catch (e) {\n                    if (e instanceof UnauthorizedException) {\n                        props.history.push(\"/unauthorized\");\n                    }\n                }\n            }\n            initRetroBoard(retroBoardId, uid);\n        }\n    }, []);\n\n    return <div style={{padding: \"50px\"}}>\n        <Row className={\"justify-content-center my-1\"} style={{borderBottom: \"1px solid white\"}}>\n            <Col className={\"col-sm-3\"}>\n                <h2>{boardTitle}</h2>\n            </Col>\n            <Col>\n                <BlurToggle />\n            </Col>\n            <Col className={\"align-self-center\"}>\n                <div className=\"pull-right\">\n                    <ShareBoard teams={teams} shareWith={shareBoardWith}/>\n                </div>\n\n                <Button className={\"pull-right\"} style={{border: \"1px solid black\"}} variant={\"light\"}>\n                    <CSVLink data={csvData.data} headers={csvData.headers} target={\"_blank\"}\n                             filename={boardTitle}>\n                        <i className=\"fa fa-file-excel-o\" style={{color: \"blue\"}}/>\n                    </CSVLink>\n                </Button>\n            </Col>\n        </Row>\n        <Row>\n            {wallsData}\n        </Row>\n    </div>\n}\n\nexport default withRouter(RetroBoardPage)","import React from 'react'\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Firebase from \"../service/Firebase\";\nimport Button from \"react-bootstrap/Button\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\n// @ts-ignore\nimport logo from '../logo.svg';\n// @ts-ignore\nimport headerImg from '../img/retro-board-lp-header.svg';\n// @ts-ignore\nimport retroBoardImg from '../img/retro-board-design.png';\n// @ts-ignore\nimport retroBoardDashboardImg from '../img/retro-board-dashboard.png';\n// @ts-ignore\nimport retroBoardTemplateImg from '../img/retro-board-create-template.png';\nimport PageFooter from \"../components/smart/PageFooter\";\nimport {Image} from \"react-bootstrap\";\nimport './style.css';\n\n\ninterface Props extends RouteComponentProps {\n    success: () => void\n}\n\nconst LandingPage: React.FunctionComponent<Props> = (props: Props) => {\n    const getReferrerUrl = () => {\n        if (props.location.state) {\n            return (props.location.state as { referrer: string }).referrer\n        }\n        return \"/\"\n    }\n\n    const tryGoogleLogin = () =>\n    {\n        let firebase = Firebase.getInstance();\n        firebase.isUserAuthenticated()\n            .then(isAuth => {\n                if (!isAuth) {\n                    firebase.authenticateUser().then(() => {\n                        props.success()\n                        props.history.push(getReferrerUrl())\n                    })\n                }\n            });\n    }\n\n    const tryAnonymousLogin = async () =>\n    {\n        let firebase = Firebase.getInstance();\n        if (!await firebase.isUserAuthenticated()) {\n            firebase.authenticateAnonymousUser().then(() => {\n                console.log(props.location.state)\n                props.success()\n                props.history.push(getReferrerUrl())\n            })\n        }\n    }\n    return <>\n        <nav className=\"navbar navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"#\">\n                <img src={logo} width=\"30\" height=\"30\"\n                     className=\"d-inline-block align-top\" alt=\"\"/>\n                Designer Boards\n            </a>\n        </nav>\n        <Container fluid={true} className={\"d-flex w-100 h-100 p-3 mx-auto flex-column\"}>\n            <section className={\"login-section\"}>\n                <Container>\n                    <Row className={\"align-items-center justify-content-center\"}>\n                        <Col>\n                            <div className={\"pt-3\"}>\n                                <h2>Get Started!</h2>\n                                <p style={{textAlign: \"center\"}}>It doesn't need a manual.</p>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button className=\"btn btn-block btn-social btn-google\" onClick={tryGoogleLogin}>\n                                <span className=\"fa fa-google\"></span>\n                                Sign in with Google\n                            </Button>\n                        </Col>\n                        <Col>\n                            <Button className=\"btn btn-block btn-social\" onClick={tryAnonymousLogin}>\n                                <span className=\"fa fa-user\"></span>\n                                Sign in as Anonymous User\n                            </Button>\n                        </Col>\n                    </Row>\n                </Container>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n                    <path fill=\"#0099ff\" fill-opacity=\"1\"\n                          d=\"M0,256L80,213.3C160,171,320,85,480,85.3C640,85,800,171,960,213.3C1120,256,1280,256,1360,256L1440,256L1440,320L1360,320C1280,320,1120,320,960,320C800,320,640,320,480,320C320,320,160,320,80,320L0,320Z\"></path>\n                </svg>\n            </section>\n            <header>\n                <Container>\n                    <Row className={\"justify-content-center align-items-center\"}>\n                        <Col>\n                            <div className={\"pt-3\"}>\n                                <h3>Build Dynamic Beautiful Boards</h3>\n                                <p>\n                                    You often find yourself working on\n                                    the excel sheet and then sharing it with the group.\n                                    Well, no need for that anymore.\n                                    You can use this platform to quickly create beautiful\n                                    looking boards for your teams to work together.\n                                </p>\n                            </div>\n\n                        </Col>\n                        <Col>\n                            <div className=\"pt-3\">\n                                <Image src={headerImg} alt={\"Designer Boards\"}/>\n                            </div>\n                        </Col>\n                    </Row>\n\n                </Container>\n            </header>\n            <section className={\"features\"}>\n                <Container>\n                    <Row>\n                        <Col>\n                            <h1 style={{borderBottom: \"2px solid black\"}}>Features</h1>\n                        </Col>\n                    </Row>\n                    <Row className={\"justify-content-center align-items-center p-3\"}>\n                        <Col>\n                            <Image src={retroBoardImg} className={\"img-fluid\"}/>\n                        </Col>\n                        <Col>\n                            <h3>In-built Retro Board Template</h3>\n                            <p>\n                                Get started with your team's retrospective meetings\n                                in less than a minute. It comes with the pre-build\n                                template to get you started quickly.\n                            </p>\n                        </Col>\n                    </Row>\n                    <Row className={\"justify-content-center align-items-center p-3\"}>\n                        <Col>\n                            <h3>Create Your Own Colorful Templates</h3>\n                            <p>\n                                Don't worry if pre-built templates doesn't serve your purpose.\n                                You can create your colorful templates with a very simple interface.\n                            </p>\n                        </Col>\n                        <Col>\n                            <Image src={retroBoardTemplateImg} className={\"img-fluid\"}/>\n                        </Col>\n                    </Row>\n                    <Row className={\"justify-content-center align-items-center p-3\"}>\n                        <Col>\n                            <Image src={retroBoardDashboardImg} className={\"img-fluid\"}/>\n                        </Col>\n                        <Col>\n                            <h3>Dashboard To Manage All Your Boards</h3>\n                            <p>\n                                Having a lot of boards can be challenging to keep track of.\n                                That's why it comes with your own dashboard so that you can\n                                find all your dashboards in one place.\n                            </p>\n                        </Col>\n                    </Row>\n                </Container>\n            </section>\n            <PageFooter/>\n        </Container>\n    </>\n}\n\nexport default withRouter(LandingPage)","import React, {useEffect} from 'react'\nimport Firebase from \"../../service/Firebase\";\nimport {Redirect} from 'react-router-dom';\n\ninterface Props {\n    service: Firebase\n}\n\nconst Logout: React.FunctionComponent<Props> = (props: Props) => {\n\n    useEffect(() => {\n        props.service.logout()\n    }, [props])\n\n    return <Redirect to={\"/login\"} />\n\n}\n\nexport default Logout","import * as React from 'react'\nimport {FunctionComponent, useState} from 'react'\nimport {Button, FormControl, Modal} from \"react-bootstrap\";\nimport {Team} from \"../../../models/Team\";\nimport Firebase from \"../../../service/Firebase\";\n\ninterface Props {\n    createTeam: (team: Team) => void\n}\nconst CreateNewTeam: FunctionComponent<Props> = (props: Props) => {\n\n    const [showModal, setShowModal] = useState(false);\n    const openModal = () => setShowModal(true);\n    const closeModal = () => setShowModal(false);\n    const [teamName, setTeamName] = useState(\"\");\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTeamName(e.currentTarget.value);\n    }\n\n    const handleCreate = () => {\n        let team:Team = {\n            teamId: \"\",\n            teamName: teamName,\n            teamMembers: [],\n            createdBy: Firebase.getInstance().getLoggedInUser()?.uid!\n        }\n        props.createTeam(team);\n        closeModal();\n    }\n\n    return <>\n        <Button variant={\"primary\"} onClick={openModal}>Create New Team</Button>\n\n        <Modal show={showModal} onHide={closeModal}>\n            <Modal.Header><h3>Create New Team</h3></Modal.Header>\n            <Modal.Body>\n                <FormControl autoFocus={true} autoComplete={\"disabled\"} onChange={handleChange} placeholder={\"Enter your team name...\"} />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant={\"primary\"} onClick={handleCreate}>Create</Button>\n                <Button variant={\"light\"} onClick={closeModal}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default CreateNewTeam;","import * as React from 'react';\nimport {FunctionComponent, useState} from 'react';\nimport {Badge, Button, FormControl, Modal} from \"react-bootstrap\";\nimport Firebase from \"../../../service/Firebase\";\n\ninterface Props {\n    teamName: string\n    addTeamMember: (teamMemberEmail: string) => void\n}\nconst AddNewTeamMember: FunctionComponent<Props> = (props: Props) => {\n\n    const [showModal, setShowModal] = useState(false);\n    const openModal = () => setShowModal(true);\n    const closeModal = () => setShowModal(false);\n    const [teamMemberEmail, setTeamMemberEmail] = useState(\"\");\n    const [error, setError] = useState({error: true, msg: \"\"});\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setError({error: false, msg: \"\"});\n        setTeamMemberEmail(e.currentTarget.value);\n    }\n    const addTeamMember = () => {\n        if (teamMemberEmail === Firebase.getInstance().getLoggedInUser()?.email) {\n            setError({error: true, msg: \"LOL! You cannot add your own email!!!\"});\n        } else {\n            props.addTeamMember(teamMemberEmail);\n            closeModal();\n            setError({error: false, msg: \"\"});\n        }\n    }\n\n    return <>\n        <Button variant={\"link\"} onClick={openModal}><i className={\"fa fa-user-plus fa-lg\"} /></Button>\n\n        <Modal show={showModal} onHide={closeModal}>\n            <Modal.Header>\n                <h4>Add New Team Member</h4>\n                <Badge variant={\"primary\"}>{props.teamName}</Badge>\n            </Modal.Header>\n            <Modal.Body>\n                <FormControl autoComplete={\"disabled\"} onChange={handleChange}\n                    placeholder={\"Enter team member's email address\"} type={\"email\"} />\n                {error.error ? <span className={\"text-danger\"}>{error.msg}</span> : <></>}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant={\"primary\"} onClick={addTeamMember}>Add Member</Button>\n                <Button variant={\"light\"} onClick={closeModal}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default AddNewTeamMember;","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport {Alert, Button, Card, Col, ListGroup, ListGroupItem, Modal, Row} from \"react-bootstrap\";\nimport {Team, TeamListResponse, TeamMemberListResponse} from \"../models/Team\";\nimport CreateNewTeam from \"../components/dumb/teams/CreateNewTeam\";\nimport TeamsServiceFactory from \"../service/Teams/TeamsServiceFactory\";\nimport User from \"../models/User\";\nimport AddNewTeamMember from \"../components/dumb/teams/AddNewTeamMember\";\n\ninterface TeamMemberModalData {\n    teamId: string\n    teamName: string\n    teamMembers: Array<User>\n}\nconst TeamsPage:React.FunctionComponent = () => {\n    const teamsService = TeamsServiceFactory.getInstance();\n    const [teams, setTeams] = useState<Array<Team>>([]);\n    const [showTeamMemberModal, setShowTeamMemberModal] = useState<boolean>(false);\n    const [teamMemberModalData, setTeamMemberModalData] = useState<TeamMemberModalData>({teamId: \"\", teamName: \"\", teamMembers: []});\n\n    const createTeam = async (team: Team) => {\n        console.log(\"Creating new team...\", teams)\n        let newTeam = await teamsService.createNewTeam(team);\n        setTeams([...teams, newTeam]);\n    }\n\n    const deleteTeam = async (team: Team) => {\n        try {\n            await teamsService.deleteTeam(team);\n            const newTeams = teams.filter(t => t.teamId !== team.teamId);\n            setTeams(newTeams);\n        } catch (e) {\n            alert(\"Cannot delete team!\");\n        }\n    }\n\n    const showModal = async (team: Team) => {\n        let teamMemberListResponse: TeamMemberListResponse = await teamsService.getTeamMembers(team.teamId);\n        setTeamMemberModalData({\n            teamId: team.teamId,\n            teamName: team.teamName,\n            teamMembers: teamMemberListResponse.teamMembers\n        });\n        setShowTeamMemberModal(true);\n    }\n\n    useEffect(() => {\n        document.title = \"Teams\";\n        // TODO: show loaded until the teams are loaded\n        const getMyTeams = async () => {\n            let teamListResponse: TeamListResponse = await teamsService.getMyTeams()\n            setTeams(teamListResponse.teams);\n        }\n        getMyTeams();\n    }, [teamsService])\n\n    const addTeamMember = async (userEmail: string) => {\n        let teamMemberListResponse: TeamMemberListResponse = await teamsService.addTeamMember(teamMemberModalData.teamId, userEmail);\n        setTeamMemberModalData({...teamMemberModalData, teamMembers: teamMemberListResponse.teamMembers});\n    }\n\n    const removeTeamMember = async (teamId: string, userEmail: string) => {\n        // TODO: Write code to remove team member from the team\n    }\n\n    return <>\n        <Row>\n            <Col md={4} sm={6}>\n                <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                    <h3>Create New Team</h3>\n                </div>\n            </Col>\n        </Row>\n        <Row>\n            <Col xs={6} md={4}>\n                <CreateNewTeam createTeam={(team: Team) => createTeam(team)}  />\n            </Col>\n        </Row>\n        <hr/>\n        <Row>\n            <Col md={4} sm={6}>\n                <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                    <h3>Existing Teams</h3>\n                </div>\n            </Col>\n        </Row>\n        <Row>\n            {\n                teams.map((team, index) => (\n                    <Col md={3} key={index} >\n                        <Card key={index}>\n                            <Card.Body className={\"mx-auto\"}>\n                                <h4>{team.teamName}</h4>\n                            </Card.Body>\n                            <Card.Body className={\"mx-auto\"}>\n                                <Button variant={\"outline-secondary\"} onClick={() => showModal(team)}>View Members</Button>\n                                <Button variant={\"outline-danger\"} onClick={() => deleteTeam(team)}>Delete Team</Button>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                ))\n            }\n        </Row>\n\n        <Modal show={showTeamMemberModal} onHide={() => setShowTeamMemberModal(false)}>\n            <Modal.Header>\n                <Modal.Title>{teamMemberModalData.teamName}</Modal.Title>\n                <span><AddNewTeamMember teamName={teamMemberModalData.teamName} addTeamMember={addTeamMember} /></span>\n            </Modal.Header>\n            <Modal.Body>\n                {\n                    teamMemberModalData.teamMembers.length === 0 ?\n                        <Alert variant={\"info\"}>\n                            No member has been added\n                        </Alert> :\n                        <ListGroup>\n                            {\n                                teamMemberModalData.teamMembers.map((teamMember, index) => (\n                                    <ListGroupItem key={index} className={\"my-auto\"}>\n                                        <span className={\"pull-left\"}>\n                                            {teamMember.displayName} <br/>\n                                            <span className={\"text-muted text-sm-left\"}>{teamMember.email}</span>\n                                        </span>\n                                        <span className={\"badge pull-right\"}>\n                                            <Button variant={\"outline-danger\"} onClick={() => removeTeamMember(teamMemberModalData.teamId, teamMember.email)}><i className={\"fa fa-trash-o\"} /></Button>\n                                        </span>\n                                    </ListGroupItem>\n                                ))\n                            }\n                        </ListGroup>\n                }\n\n            </Modal.Body>\n        </Modal>\n    </>;\n}\n\nexport default withRouter(TeamsPage);","import BoardTemplate, {BoardTemplates} from \"../../models/BoardTemplate\";\nimport {request} from \"../../env-config\";\n\nclass TemplateService {\n\n    public static getInstance() {\n        return new TemplateService();\n    }\n\n    public async createBoardTemplate(boardTemplate: BoardTemplate) {\n        let response = await request.post(`/templates`, boardTemplate);\n        if (201 === response.status) {\n            let templateResponse = await request.get(response.headers.location);\n            return templateResponse.data as BoardTemplate;\n        }\n\n        throw Error(\"Cannot create template. There is some error in the backend. Status Code: \" + response.status);\n    }\n\n    public async getBoardTemplates() {\n        let response = await request.get(`/templates`);\n        if (200 === response.status) {\n            return response.data as BoardTemplates;\n        }\n\n        throw Error(\"Error fetching templates. Status: \" + response.status);\n    }\n\n    public async deleteBoardTemplate(boardTemplate: BoardTemplate) {\n        let response = await request.delete(`/templates/${boardTemplate.templateId}`);\n        if (204 === response.status) {\n            return;// delete successful\n        }\n\n        throw Error(\"Error deleting template. Status: \" + response.status);\n    }\n}\n\nexport default TemplateService;","import React from 'react';\nimport {HashRouter as Router} from 'react-router-dom'\nimport './App.css';\nimport LayoutAuthenticated from \"./components/smart/layouts/LayoutAuthenticated\";\nimport LayoutUnauthenticated from \"./components/smart/layouts/LayoutUnauthenticated\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store/Store\";\nimport Firebase from \"./service/Firebase\";\nimport {Route, RouteComponentProps} from \"react-router\";\nimport HomePage from \"./containers/HomePage\";\nimport RetroBoardPage from \"./containers/RetroBoardPage\";\nimport LoginPage from \"./containers/LandingPage\";\nimport Logout from \"./components/smart/Logout\";\nimport RetroBoardServiceFactory from \"./service/RetroBoard/RetroBoardServiceFactory\";\nimport TeamsPage from \"./containers/TeamsPage\";\nimport TemplateService from \"./service/Templates/TemplateService\";\nimport {BoardContextProvider} from \"./redux/context/BoardContext\";\n\ninterface Props {\n}\n\ninterface State {\n    isLogInFlowExecuted: boolean\n}\n\nclass App extends React.Component<Props, State> {\n\n    state: State = {\n        isLogInFlowExecuted: false\n    }\n\n    render() {\n        return <Provider store={store}>\n            <Router>\n                <Route exact path={\"/login\"} component={(props: RouteComponentProps) =>\n                    <LayoutUnauthenticated success={() => this.setState({isLogInFlowExecuted: true})}>\n                        <LoginPage\n                            success={() => this.setState({isLogInFlowExecuted: true})}/>\n                    </LayoutUnauthenticated>}/>\n\n                <Route exact path={\"/\"} component={(props: RouteComponentProps) =>\n                    <LayoutAuthenticated>\n                        <HomePage {...props}\n                                  retroBoardService={RetroBoardServiceFactory.getInstance()}\n                                  templateService={TemplateService.getInstance()}/>\n                    </LayoutAuthenticated>}/>\n\n                <Route exact path={\"/teams\"} component={(props: RouteComponentProps) =>\n                    <LayoutAuthenticated>\n                        <TeamsPage {...props} />\n                    </LayoutAuthenticated>}/>\n\n                <Route exact path={\"/retro-board/:uid/:retroBoardId\"} component={(props: RouteComponentProps) =>\n                    <LayoutAuthenticated>\n                        <BoardContextProvider>\n                            <RetroBoardPage {...props.match.params} />\n                        </BoardContextProvider>\n                    </LayoutAuthenticated>}/>\n\n                    <Route exact path={\"/logout\"} component={(props: RouteComponentProps) =>\n                    <LayoutAuthenticated>\n                        <Logout service={Firebase.getInstance()} />\n                    </LayoutAuthenticated>}/>\n            </Router>\n        </Provider>\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store/Store\";\nimport 'bootstrap-social/assets/css/docs.css'\nimport 'bootstrap-social/assets/css/font-awesome.css'\nimport 'bootstrap-social/assets/img/bootstrap-social.png'\nimport 'bootstrap-social/bootstrap-social.css'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}